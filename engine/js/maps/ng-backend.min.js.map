{"version":3,"sources":["namespace.js","utils.js","constants.js","action-types.js","state.actions.js","sites.actions.js","sites.reducer.js","site-settings.actions.js","site-settings.reducer.js","site-template-settings.actions.js","site-template-settings.reducer.js","site-sections.actions.js","site-sections.reducer.js","section-tags.actions.js","section-tags.reducer.js","section-entries.actions.js","section-entries.reducer.js","site-templates.reducer.js","reducers.js","index.js"],"names":["window","Berta","document","redux_store","sync","url","data","method","token","getCookie","promise","syncState","fetch","credentials","headers","Accept","Content-Type","X-Authorization","body","undefined","JSON","stringify","then","response","status","BertaHelpers","logoutUser","Error","json","error","console","message","cname","name","ca","cookie","split","i","length","c","charAt","substring","indexOf","getQueryParams","pairs","location","search","slice","result","forEach","pair","decodeURIComponent","getCurrentSite","q","site","escapeHTML","str","div","createElement","text","createTextNode","appendChild","innerHTML","getAllTemplates","templates","getState","siteTemplates","toJSON","Object","getOwnPropertyNames","Templates","load","templateList","getElementById","Array","prototype","call","querySelectorAll","template","getAttribute","this","bind","get","ctx","tpl","replace","match","domReady","callback","ready","detach","addEventListener","removeEventListener","completed","detachEvent","event","type","readyState","attachEvent","top","frameElement","documentElement","e","doScroll","scrollCheck","setTimeout","editables","xEditable","xEditableColor","xEditableSelect","xEditableSelectRC","xEditableFontSelect","xEditableImage","xEditableICO","xEditableTA","xEditableMCE","xEditableMCESimple","xEditableRC","xEditableYesNo","xEmpty","formats","longtext","richtext","color","image","icon","select","fontselect","ActionTypes","GET_STATE","SET_STATE","INIT_CREATE_SITE","CREATE_SITE","INIT_UPDATE_SITE","UPDATE_SITE","INIT_ORDER_SITES","ORDER_SITES","INIT_DELETE_SITE","DELETE_SITE","CREATE_SITE_SETTINGS","INIT_UPDATE_SITE_SETTINGS","UPDATE_SITE_SETTINGS","RENAME_SITE_SETTINGS_SITENAME","INIT_DELETE_SITE_SETTINGS","DELETE_SITE_SETTINGS","CREATE_SITE_TEMPLATE_SETTINGS","INIT_UPDATE_SITE_TEMPLATE_SETTINGS","UPDATE_SITE_TEMPLATE_SETTINGS","RENAME_SITE_TEMPLATE_SETTINGS_SITENAME","INIT_DELETE_SITE_TEMPLATE_SETTINGS","DELETE_SITE_TEMPLATE_SETTINGS","INIT_CREATE_SITE_SECTION","CREATE_SITE_SECTION","INIT_UPDATE_SITE_SECTION","UPDATE_SITE_SECTION","RENAME_SITE_SECTIONS_SITENAME","RESET_SITE_SECTION","INIT_ORDER_SITE_SECTIONS","ORDER_SITE_SECTIONS","INIT_DELETE_SITE_SECTION","DELETE_SITE_SECTION","INIT_DELETE_SITE_SECTIONS","DELETE_SITE_SECTIONS","INIT_ORDER_SITE_SECTION_BACKGROUNDS","ORDER_SITE_SECTION_BACKGROUNDS","INIT_DELETE_SITE_SECTION_BACKGROUND","DELETE_SITE_SECTION_BACKGROUND","ADD_SECTION_TAGS","ADD_SITE_SECTIONS_TAGS","INIT_ORDER_SECTION_TAGS","ORDER_SECTION_TAGS","INIT_UPDATE_SECTION_TAGS","UPDATE_SECTION_TAGS","RENAME_SECTION_TAGS","RENAME_SECTION_TAGS_SITENAME","DELETE_SECTION_TAGS","INIT_DELETE_SITE_SECTIONS_TAGS","DELETE_SITE_SECTIONS_TAGS","ADD_SITE_SECTIONS_ENTRIES","ADD_SECTION_ENTRIES","INIT_UPDATE_SECTION_ENTRY","UPDATE_SECTION_ENTRY","INIT_UPDATE_SECTION_ENTRIES","RENAME_SECTION_ENTRIES_SITENAME","RENAME_SECTION_ENTRIES","INIT_ORDER_SECTION_ENTRIES","ORDER_SECTION_ENTRIES","INIT_ORDER_SECTION_ENTRY_GALLERY","ORDER_SECTION_ENTRY_GALLERY","INIT_DELETE_ENTRY_GALLERY_IMAGE","DELETE_ENTRY_GALLERY_IMAGE","INIT_DELETE_SECTION_ENTRY","DELETE_SECTION_ENTRY","INIT_DELETE_SITE_SECTIONS_ENTRIES","DELETE_SITE_SECTIONS_ENTRIES","INIT_DELETE_SECTION_ENTRIES","DELETE_SECTION_ENTRIES","Actions","assign","dispatch","error_message","setState","state","urls","initCreateSite","onComplete","sites","createSite","settings","createSiteSettings","sections","createSiteSection","entries","addSiteSectionsEntries","site_name","tags","section","addSiteSectionsTags","siteTemplateSettings","createSiteTemplateSettings","initUpdateSite","path","value","updateSite","resp","renameSite","getStore","order","parseInt","find","renameSiteSectionsSitename","renameSiteSettingsSitename","renameSiteTemplateSettingsSitename","renameSectionTagsSitename","renameSectionEntriesSitename","initOrderSites","orderSites","initdeleteSite","deleteSite","deleteSiteSections","deleteSiteSettings","deleteSiteTemplateSettings","deleteSiteSectionsTags","deleteSiteSectionsEntries","Immutable","reducers","action","Map","fromJS","set","size","prop","map","getIn","setIn","new_order","filter","initUpdateSiteSettings","siteSettings","updateSiteSettings","site_settings","section_old_name","mapKeys","k","initUpdateSiteTemplateSettings","updateSiteTemplateSettings","site_template_settings","initCreateSiteSection","title","siteSections","addSectionTags","addSectionEntries","initUpdateSiteSection","updateSiteSection","initRenameSiteSection","renameSectionTags","section_name","old_name","renameSectionEntries","resetSiteSection","siteSectionsReset","initOrderSiteSections","orderSiteSections","initDeleteSiteSection","deleteSiteSection","deleteSectionTags","deleteSectionEntries","initOrderSiteSectionBackgrounds","files","siteSectionBackgrounds","orderSiteSectionBackgrounds","initDeleteSiteSectionBackground","file","deleteSiteSectionBackground","site_sections","merge","deleteIn","mediafolder","initOrderSectionTags","tag","sectionTags","orderSectionTags","updateSectionTags","section_tags","site_old_name","initUpdateSectionEntry","sectionEntries","updateSectionEntry","section_order","has_direct_content","initOrderSectionEntries","entryId","orderSectionEntries","initDeleteSectionEntry","deleteSectionEntry","entry_count","initOrderSectionEntryGallery","entryGallery","orderSectionEntryGallery","initDeleteEntryGalleryImage","deleteEntryGalleryImage","concat","siteName","sectionName","index","findIndex","entry","entry_id","entry_order","s","Redux","root_reducer","combineReducers","ReduxThunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware"],"mappings":"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","file":"../ng-backend.min.js","sourcesContent":["window.Berta = {};\n","(function(window, document, redux_store) {\n  'use strict';\n  /** @todo: move helpers to Berta namespace */\n\n  window.sync = function (url, data, method) {\n    var token = window.getCookie('token');\n    method = method || 'PATCH';\n    var promise;\n\n    if (typeof window.syncState === 'function') {\n      promise = window.syncState(url, data, method);\n    } else {\n      promise = fetch(\n        url,\n        {\n          method: method,\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'X-Authorization': 'Bearer ' + token\n          },\n          body: method === 'GET' ? undefined : JSON.stringify(data)\n        }\n      ).then(function (response) {\n        if (response.status === 401) {\n          window.BertaHelpers.logoutUser();\n          throw new Error('Unauthorized');\n        }\n        return response.json();\n      });\n    }\n\n    return promise\n      .catch(function (error) {\n        /** @todo: create error state/reducer to manage failed requests and other app errors */\n        console.error('Request failed:', error.message);\n      });\n  };\n\n  window.getCookie = function (cname) {\n    var name = cname + '=';\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return '';\n  };\n\n  window.getQueryParams = function getQueryParams() {\n    var pairs = location.search.slice(1).split('&');\n    var result = {};\n\n    pairs.forEach(function(pair) {\n      if (pair[0]) {\n        pair = pair.split('=');\n        result[pair[0]] = decodeURIComponent(pair[1] || '');\n      }\n    });\n\n    return result;\n  };\n\n  window.getCurrentSite = function getCurrentSite() {\n    var q = window.getQueryParams();\n    return q.site === undefined ? '' : q.site;\n  };\n\n  window.escapeHTML = function escapeHTML(str) {\n    var div = document.createElement('div');\n    var text = document.createTextNode(str);\n    div.appendChild(text);\n    return div.innerHTML;\n  };\n\n  window.getAllTemplates = function getAllTemplates() {\n    var templates = redux_store.getState().siteTemplates.toJSON();\n\n    return Object.getOwnPropertyNames(templates);\n  };\n\n  var Templates = {\n    templates: {}\n  };\n\n  Templates.load = function load() {\n    var templateList = document.getElementById('templateList');\n\n    if (templateList) {\n      var templates = Array.prototype.slice.call(\n        templateList.querySelectorAll('script'),\n        0\n      );\n\n      templates.forEach(function(template){\n        if(template.getAttribute('type') === 'text/template'){\n          this.templates[template.getAttribute('id')] = template.innerHTML;\n        }\n      }.bind(this));\n    }\n  }.bind(Templates);\n\n  Templates.get = function get(name, ctx) {\n    var tpl = this.templates[name];\n\n    return tpl.replace(/<%=([^%>]+)%>/g, function(str, match) {\n      return ctx[match];\n    });\n  }.bind(Templates);\n\n  window.Templates = Templates;\n\n  window.domReady = function(callback) {\n    var ready = false,\n        detach = function() {\n          if(document.addEventListener) {\n            document.removeEventListener('DOMContentLoaded', completed);\n            window.removeEventListener('load', completed);\n          } else {\n            document.detachEvent('onreadystatechange', completed);\n            window.detachEvent('onload', completed);\n          }\n        },\n        completed = function() {\n          if(!ready && (document.addEventListener || event.type === 'load' || document.readyState === 'complete')) {\n            ready = true;\n            detach();\n            callback();\n          }\n        };\n\n    if(document.readyState === 'complete') {\n      callback();\n    } else if(document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', completed);\n      window.addEventListener('load', completed);\n    } else {\n      document.attachEvent('onreadystatechange', completed);\n      window.attachEvent('onload', completed);\n\n      var top = false;\n\n      try {\n        top = window.frameElement === null && document.documentElement;\n      } catch(e) { /* skip */}\n\n      if(top && top.doScroll) {\n        (function scrollCheck() {\n          if(ready) return;\n\n          try {\n            top.doScroll('left');\n          } catch(e) {\n            return setTimeout(scrollCheck, 50);\n          }\n\n          ready = true;\n          detach();\n          callback();\n        })();\n      }\n    }\n  };\n})(window, document, window.redux_store);\n","(function(window) {\n  'use strict';\n\n  window.editables = {\n    xEditable: 'xEditable',                     // simple input\n    xEditableColor: 'xEditableColor',           // simple input\n    xEditableSelect: 'xEditableSelect',         // select\n    xEditableSelectRC: 'xEditableSelectRC',     // select\n    xEditableFontSelect: 'xEditableFontSelect', // select\n    xEditableImage: 'xEditableImage',           // image upload\n    xEditableICO: 'xEditableICO',               // ico upload\n    xEditableTA: 'xEditableTA',                 // textarea\n    xEditableMCE: 'xEditableMCE',               // textarea\n    xEditableMCESimple: 'xEditableMCESimple',   // textarea\n    xEditableRC: 'xEditableRC',                 // with \"real\" content\n    xEditableYesNo: 'xEditableYesNo',           // the \"yes/no\" switch\n    xEmpty: 'xEmpty'\n  };\n\n  window.formats = {\n    text: window.editables.xEditable,\n    longtext: window.editables.xEditableTA,\n    richtext: window.editables.xEditableMCESimple,\n    color: window.editables.xEditableColor,\n    image: window.editables.xEditableImage,\n    icon: window.editables.xEditableICO,\n    select: window.editables.xEditableSelectRC,\n    fontselect: window.editables.xEditableFontSelect\n  };\n\n})(window);\n","(function (window) {\n  'use strict';\n\n  window.ActionTypes = {\n    GET_STATE: 'GET_STATE',\n    SET_STATE: 'SET_STATE',\n\n    INIT_CREATE_SITE: 'INIT_CREATE_SITE',\n    CREATE_SITE: 'CREATE_SITE',\n    INIT_UPDATE_SITE: 'INIT_UPDATE_SITE',\n    UPDATE_SITE: 'UPDATE_SITE',\n    INIT_ORDER_SITES: 'INIT_ORDER_SITES',\n    ORDER_SITES: 'ORDER_SITES',\n    INIT_DELETE_SITE: 'INIT_DELETE_SITE',\n    DELETE_SITE: 'DELETE_SITE',\n\n    CREATE_SITE_SETTINGS: 'CREATE_SITE_SETTINGS',\n    INIT_UPDATE_SITE_SETTINGS: 'INIT_UPDATE_SITE_SETTINGS',\n    UPDATE_SITE_SETTINGS: 'UPDATE_SITE_SETTINGS',\n    RENAME_SITE_SETTINGS_SITENAME: 'RENAME_SITE_SETTINGS_SITENAME',\n    INIT_DELETE_SITE_SETTINGS: 'INIT_DELETE_SITE_SETTINGS',\n    DELETE_SITE_SETTINGS: 'DELETE_SITE_SETTINGS',\n\n    CREATE_SITE_TEMPLATE_SETTINGS: 'CREATE_SITE_TEMPLATE_SETTINGS',\n    INIT_UPDATE_SITE_TEMPLATE_SETTINGS: 'INIT_UPDATE_SITE_TEMPLATE_SETTINGS',\n    UPDATE_SITE_TEMPLATE_SETTINGS: 'UPDATE_SITE_TEMPLATE_SETTINGS',\n    RENAME_SITE_TEMPLATE_SETTINGS_SITENAME: 'RENAME_SITE_TEMPLATE_SETTINGS_SITENAME',\n    INIT_DELETE_SITE_TEMPLATE_SETTINGS: 'INIT_DELETE_SITE_TEMPLATE_SETTINGS',\n    DELETE_SITE_TEMPLATE_SETTINGS: 'DELETE_SITE_TEMPLATE_SETTINGS',\n\n    INIT_CREATE_SITE_SECTION: 'INIT_CREATE_SITE_SECTION',\n    CREATE_SITE_SECTION: 'CREATE_SITE_SECTION',\n    INIT_UPDATE_SITE_SECTION: 'INIT_UPDATE_SITE_SECTION',\n    UPDATE_SITE_SECTION: 'UPDATE_SITE_SECTION',\n    RENAME_SITE_SECTIONS_SITENAME: 'RENAME_SITE_SECTIONS_SITENAME',\n    RESET_SITE_SECTION: 'RESET_SITE_SECTION',\n    INIT_ORDER_SITE_SECTIONS: 'INIT_ORDER_SITE_SECTIONS',\n    ORDER_SITE_SECTIONS: 'ORDER_SITE_SECTIONS',\n    INIT_DELETE_SITE_SECTION: 'INIT_DELETE_SITE_SECTION',\n    DELETE_SITE_SECTION: 'DELETE_SITE_SECTION',\n    INIT_DELETE_SITE_SECTIONS: 'INIT_DELETE_SITE_SECTIONS',\n    DELETE_SITE_SECTIONS: 'DELETE_SITE_SECTIONS',\n\n    INIT_ORDER_SITE_SECTION_BACKGROUNDS: 'INIT_ORDER_SITE_SECTION_BACKGROUNDS',\n    ORDER_SITE_SECTION_BACKGROUNDS: 'ORDER_SITE_SECTION_BACKGROUNDS',\n    INIT_DELETE_SITE_SECTION_BACKGROUND: 'INIT_DELETE_SITE_SECTION_BACKGROUND',\n    DELETE_SITE_SECTION_BACKGROUND: 'DELETE_SITE_SECTION_BACKGROUND',\n\n    ADD_SECTION_TAGS: 'ADD_SECTION_TAGS',\n    ADD_SITE_SECTIONS_TAGS: 'ADD_SITE_SECTIONS_TAGS',\n    INIT_ORDER_SECTION_TAGS: 'INIT_ORDER_SECTION_TAGS',\n    ORDER_SECTION_TAGS: 'ORDER_SECTION_TAGS',\n    INIT_UPDATE_SECTION_TAGS: 'INIT_UPDATE_SECTION_TAGS',\n    UPDATE_SECTION_TAGS: 'UPDATE_SECTION_TAGS',\n    RENAME_SECTION_TAGS: 'RENAME_SECTION_TAGS',\n    RENAME_SECTION_TAGS_SITENAME: 'RENAME_SECTION_TAGS_SITENAME',\n    DELETE_SECTION_TAGS: 'DELETE_SECTION_TAGS',\n    INIT_DELETE_SITE_SECTIONS_TAGS: 'INIT_DELETE_SITE_SECTIONS_TAGS',\n    DELETE_SITE_SECTIONS_TAGS: 'DELETE_SITE_SECTIONS_TAGS',\n\n    ADD_SITE_SECTIONS_ENTRIES: 'ADD_SITE_SECTIONS_ENTRIES',\n    ADD_SECTION_ENTRIES: 'ADD_SECTION_ENTRIES',\n    INIT_UPDATE_SECTION_ENTRY: 'INIT_UPDATE_SECTION_ENTRY',\n    UPDATE_SECTION_ENTRY: 'UPDATE_SECTION_ENTRY',\n    INIT_UPDATE_SECTION_ENTRIES: 'INIT_UPDATE_SECTION_ENTRIES',\n    RENAME_SECTION_ENTRIES_SITENAME: 'RENAME_SECTION_ENTRIES_SITENAME',\n    RENAME_SECTION_ENTRIES: 'RENAME_SECTION_ENTRIES',\n    INIT_ORDER_SECTION_ENTRIES: 'INIT_ORDER_SECTION_ENTRIES',\n    ORDER_SECTION_ENTRIES: 'ORDER_SECTION_ENTRIES',\n    INIT_ORDER_SECTION_ENTRY_GALLERY: 'INIT_ORDER_SECTION_ENTRY_GALLERY',\n    ORDER_SECTION_ENTRY_GALLERY: 'ORDER_SECTION_ENTRY_GALLERY',\n    INIT_DELETE_ENTRY_GALLERY_IMAGE: 'INIT_DELETE_ENTRY_GALLERY_IMAGE',\n    DELETE_ENTRY_GALLERY_IMAGE: 'DELETE_ENTRY_GALLERY_IMAGE',\n    INIT_DELETE_SECTION_ENTRY: 'INIT_DELETE_SECTION_ENTRY',\n    DELETE_SECTION_ENTRY: 'DELETE_SECTION_ENTRY',\n    INIT_DELETE_SITE_SECTIONS_ENTRIES: 'INIT_DELETE_SITE_SECTIONS_ENTRIES',\n    DELETE_SITE_SECTIONS_ENTRIES: 'DELETE_SITE_SECTIONS_ENTRIES',\n    INIT_DELETE_SECTION_ENTRIES: 'INIT_DELETE_SECTION_ENTRIES',\n    DELETE_SECTION_ENTRIES: 'DELETE_SECTION_ENTRIES'\n  };\n})(window);\n","(function(window, Berta, ActionTypes, sync) {\n  'use strict';\n\n  window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    getState: function(site) {\n      site = site ? site : '0';\n      var url = '/_api/v1/state/' + site;\n\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.GET_STATE });\n\n        sync(url, {}, 'GET')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(window.Actions.setState(response));\n            }\n          });\n      };\n    },\n\n\n    setState: function(state) {\n      Berta.urls = state.urls;\n\n      return {\n        type: ActionTypes.SET_STATE,\n        state: state\n      };\n    }\n  });\n})(window, window.Berta, window.ActionTypes, window.sync);\n","(function (window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    initCreateSite: function (site, onComplete) {\n      return function (dispatch) {\n\n        dispatch({\n          type: ActionTypes.INIT_CREATE_SITE\n        });\n\n        sync(window.Berta.urls.sites, {\n          site: site\n        }, 'POST')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.createSite(response.site));\n\n              if (response.settings) {\n                dispatch(Actions.createSiteSettings(response.site.name, response.settings));\n              }\n\n              if (response.sections && response.sections.length) {\n                for (var i = 0; i < response.sections.length; i++) {\n                  dispatch(Actions.createSiteSection(response.sections[i]));\n                }\n              }\n\n              if (response.entries && response.entries.length) {\n                dispatch(Actions.addSiteSectionsEntries({\n                  site_name: response.site.name,\n                  entries: response.entries\n                }));\n              }\n\n              if (response.tags && response.tags.section) {\n                dispatch(Actions.addSiteSectionsTags({\n                  site_name: response.site.name,\n                  tags: response.tags\n                }));\n              }\n\n              if (response.siteTemplateSettings) {\n                dispatch(Actions.createSiteTemplateSettings(response.site.name, response.siteTemplateSettings));\n              }\n            }\n            onComplete(response.site);\n          });\n      };\n    },\n\n    createSite: function (data) {\n      return {\n        type: ActionTypes.CREATE_SITE,\n        data: data\n      };\n    },\n\n    initUpdateSite: function (path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SITE\n        });\n\n        sync(window.Berta.urls.sites, {\n          path: path,\n          value: value\n        })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSite(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    updateSite: function (resp) {\n      return {\n        type: ActionTypes.UPDATE_SITE,\n        resp: resp\n      };\n    },\n\n    renameSite: function (path, value, onComplete) {\n      return function (dispatch, getStore) {\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SITE\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SITE_SECTION\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SITE_SETTINGS\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SITE_TEMPLATE_SETTINGS\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SECTION_TAGS\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SECTION_ENTRIES\n        });\n\n        sync(window.Berta.urls.sites, {\n          path: path,\n          value: value\n        })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              path = path.split('/');\n              var order = parseInt(path[1], 10);\n              var site = getStore().sites.find(function (site) {\n                return site.get('order') === order;\n              });\n\n              dispatch(Actions.updateSite(response));\n              dispatch(Actions.renameSiteSectionsSitename({\n                site: site,\n                site_name: response.value\n              }));\n              dispatch(Actions.renameSiteSettingsSitename({\n                site: site,\n                site_name: response.value\n              }));\n              dispatch(Actions.renameSiteTemplateSettingsSitename({\n                site: site,\n                site_name: response.value\n              }));\n              dispatch(Actions.renameSectionTagsSitename({\n                site: site,\n                site_name: response.value\n              }));\n              dispatch(Actions.renameSectionEntriesSitename({\n                site: site,\n                site_name: response.value\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    initOrderSites: function (sites, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_ORDER_SITES\n        });\n\n        sync(window.Berta.urls.sites, sites, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSites(sites));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    orderSites: function (resp) {\n      return {\n        type: ActionTypes.ORDER_SITES,\n        resp: resp\n      };\n    },\n\n    initdeleteSite: function (site, onComplete) {\n      return function (dispatch) {\n\n        // @TODO also delete related: entries\n\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SITE\n        });\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SITE_SECTIONS\n        });\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SITE_SETTINGS\n        });\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SITE_TEMPLATE_SETTINGS\n        });\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SITE_SECTIONS_TAGS\n        });\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SITE_SECTIONS_ENTRIES\n        });\n\n        sync(window.Berta.urls.sites, {\n          site: site\n        }, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteSite(response));\n              dispatch(Actions.deleteSiteSections({\n                site_name: response.name\n              }));\n              dispatch(Actions.deleteSiteSettings({\n                site_name: response.name\n              }));\n              dispatch(Actions.deleteSiteTemplateSettings({\n                site_name: response.name\n              }));\n              dispatch(Actions.deleteSiteSectionsTags({\n                site_name: response.name\n              }));\n              dispatch(Actions.deleteSiteSectionsEntries({\n                site_name: response.name\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    deleteSite: function (resp) {\n      return {\n        type: ActionTypes.DELETE_SITE,\n        resp: resp\n      };\n    }\n  });\n})(window, window.ActionTypes, window.sync);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    sites: function(state, action) {\n      var path, value, order;\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.sites);\n\n\n        case ActionTypes.CREATE_SITE:\n          return state.set(state.size, Immutable.fromJS(action.data));\n\n\n        case ActionTypes.UPDATE_SITE:\n          path = action.resp.path.split('/');\n          order = parseInt(path[1], 10);\n          value = action.resp.value;\n          var prop = path.slice(2);  // example \"title\" or \"@attributes/published\"\n\n          return state.map(function (site) {\n            if (site.get('order') === order && site.getIn(prop) !== value) {\n              return site.setIn(prop, value);\n            }\n            return site;\n          });\n\n\n        case ActionTypes.ORDER_SITES:\n          return state.map(function (site) {\n            var name = site.get('name');\n            if (name === '') {\n              name = '0';\n            }\n            var new_order = action.resp.indexOf(name);\n\n            if (site.get('order') !== new_order) {\n              return site.set('order', new_order);\n            }\n            return site;\n          });\n\n\n        case ActionTypes.DELETE_SITE:\n          // Filter out deleted site\n          return state.filter(function (site) {\n            return site.get('name') !== action.resp.name;\n\n          // Update order\n          }).map(function (site, order) {\n            if (site.get('order') !== order) {\n              return site.set('order', order);\n            }\n            return site;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function (window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    createSiteSettings: function (site_name, data) {\n      return {\n        type: ActionTypes.CREATE_SITE_SETTINGS,\n        site_name: site_name,\n        data: data\n      };\n    },\n\n    initUpdateSiteSettings: function(path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SETTINGS });\n\n        sync(window.Berta.urls.siteSettings, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSiteSettings(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    updateSiteSettings: function (resp) {\n      return {\n        type: ActionTypes.UPDATE_SITE_SETTINGS,\n        resp: resp\n      };\n    },\n\n    renameSiteSettingsSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SITE_SETTINGS_SITENAME,\n        data: data\n      };\n    },\n\n    deleteSiteSettings: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_SETTINGS,\n        data: data\n      };\n    },\n  });\n\n})(window, window.ActionTypes, window.sync);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    siteSettings: function(state, action) {\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.site_settings);\n\n\n        case ActionTypes.CREATE_SITE_SETTINGS:\n          return state.setIn([action.site_name], Immutable.fromJS(action.data));\n\n\n        case ActionTypes.UPDATE_SITE_SETTINGS:\n          var path = action.resp.path.split('/').slice(2);\n          var value = action.resp.value;\n\n          return state.setIn(\n            [action.resp.site, path[0], path[1]],\n            value\n          );\n\n\n        case ActionTypes.RENAME_SITE_SETTINGS_SITENAME:\n          var section_old_name = action.data.site.get('name');\n\n          return state.mapKeys(function (k) {\n            if (k === section_old_name) {\n              return action.data.site_name;\n            }\n            return k;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SETTINGS:\n          return state.filter(function (settings, site_name) {\n            return site_name !== action.data.site_name;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function (window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    createSiteTemplateSettings: function(site_name, data) {\n      return {\n        type: ActionTypes.CREATE_SITE_TEMPLATE_SETTINGS,\n        site_name: site_name,\n        data: data\n      };\n    },\n\n    initUpdateSiteTemplateSettings: function(path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_TEMPLATE_SETTINGS });\n\n        sync(window.Berta.urls.siteTemplateSettings, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSiteTemplateSettings(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    updateSiteTemplateSettings: function (resp) {\n      return {\n        type: ActionTypes.UPDATE_SITE_TEMPLATE_SETTINGS,\n        resp: resp\n      };\n    },\n\n    renameSiteTemplateSettingsSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SITE_TEMPLATE_SETTINGS_SITENAME,\n        data: data\n      };\n    },\n\n    deleteSiteTemplateSettings: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_TEMPLATE_SETTINGS,\n        data: data\n      };\n    }\n  });\n\n})(window, window.ActionTypes, window.sync);\n","(function (window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    siteTemplateSettings: function (state, action) {\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.site_template_settings);\n\n\n        case ActionTypes.CREATE_SITE_TEMPLATE_SETTINGS:\n          return state.setIn([action.site_name], Immutable.fromJS(action.data));\n\n\n        case ActionTypes.UPDATE_SITE_TEMPLATE_SETTINGS:\n          var path = action.resp.path.split('/').slice(2);\n          var value = action.resp.value;\n\n          return state.setIn(\n            [action.resp.site, path[0], path[1], path[2]],\n            value\n          );\n\n\n        case ActionTypes.RENAME_SITE_TEMPLATE_SETTINGS_SITENAME:\n          var section_old_name = action.data.site.get('name');\n\n          return state.mapKeys(function (k) {\n            if (k === section_old_name) {\n              return action.data.site_name;\n            }\n            return k;\n          });\n\n\n        case ActionTypes.DELETE_SITE_TEMPLATE_SETTINGS:\n          return state.filter(function (site_template_settings, site_name) {\n            return site_name !== action.data.site_name;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function (window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    initCreateSiteSection: function (site, name, title, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_CREATE_SITE_SECTION\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SECTION_TAGS\n        });\n\n        sync(window.Berta.urls.siteSections, {\n          site: site,\n          name: name,\n          title: title\n        }, 'POST')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.createSiteSection(response.section));\n\n              if (response.tags) {\n                dispatch(Actions.addSectionTags({\n                  site_name: site,\n                  tags: response.tags\n                }));\n              }\n\n              if (response.entries) {\n                dispatch(Actions.addSectionEntries({\n                  site_name: site,\n                  entries: response.entries\n                }));\n              }\n            }\n            onComplete(response.section);\n          });\n      };\n    },\n\n\n    createSiteSection: function (resp) {\n      return {\n        type: ActionTypes.CREATE_SITE_SECTION,\n        resp: resp\n      };\n    },\n\n\n    initUpdateSiteSection: function (path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SITE_SECTION\n        });\n\n        sync(window.Berta.urls.siteSections, {\n          path: path,\n          value: value\n        })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSiteSection(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    updateSiteSection: function (resp) {\n      return {\n        type: ActionTypes.UPDATE_SITE_SECTION,\n        resp: resp\n      };\n    },\n\n\n    initRenameSiteSection: function (path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SITE_SECTION\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SECTION_TAGS\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SECTION_ENTRIES\n        });\n\n        sync(window.Berta.urls.siteSections, {\n          path: path,\n          value: value\n        })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSiteSection(response));\n              dispatch(Actions.renameSectionTags({\n                site_name: response.site,\n                section_name: response.section.name,\n                section_old_name: response.old_name\n              }));\n              dispatch(Actions.renameSectionEntries({\n                site_name: response.site,\n                section_name: response.section.name,\n                section_old_name: response.old_name\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    renameSiteSectionsSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SITE_SECTIONS_SITENAME,\n        data: data\n      };\n    },\n\n\n    resetSiteSection: function (path, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.RESET_SITE_SECTION,\n          path: path\n        });\n\n        sync(window.Berta.urls.siteSectionsReset, {\n          path: path\n        })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    initOrderSiteSections: function (site, sections, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_ORDER_SITE_SECTIONS\n        });\n\n        sync(window.Berta.urls.siteSections, {\n          site: site,\n          sections: sections\n        }, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSiteSections({\n                site: site,\n                sections: sections\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    orderSiteSections: function (resp) {\n      return {\n        type: ActionTypes.ORDER_SITE_SECTIONS,\n        resp: resp\n      };\n    },\n\n\n    initDeleteSiteSection: function (site, section, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SITE_SECTION\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SECTION_TAGS\n        });\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SECTION_ENTRIES\n        });\n\n        sync(window.Berta.urls.siteSections, {\n          site: site,\n          section: section\n        }, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteSiteSection(response));\n\n              dispatch(Actions.deleteSectionTags({\n                site_name: response.site,\n                section_name: response.name\n              }));\n\n              dispatch(Actions.deleteSectionEntries({\n                site_name: response.site,\n                section_name: response.name\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    deleteSiteSection: function (resp) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTION,\n        resp: resp\n      };\n    },\n\n\n    deleteSiteSections: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTIONS,\n        data: data\n      };\n    },\n\n\n    initOrderSiteSectionBackgrounds: function (site, section, files, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_ORDER_SITE_SECTION_BACKGROUNDS\n        });\n\n        sync(window.Berta.urls.siteSectionBackgrounds, {\n          site: site,\n          section: section,\n          files: files\n        }, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSiteSectionBackgrounds(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    orderSiteSectionBackgrounds: function (resp) {\n      return {\n        type: ActionTypes.ORDER_SITE_SECTION_BACKGROUNDS,\n        resp: resp\n      };\n    },\n\n\n    initDeleteSiteSectionBackground: function (site, section, file, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SITE_SECTION_BACKGROUND\n        });\n\n        sync(window.Berta.urls.siteSectionBackgrounds, {\n          site: site,\n          section: section,\n          file: file\n        }, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteSiteSectionBackground(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    // There is no reducer for this action at the moment\n    // `orderSiteSectionBackgrounds` is called after delete which updates state\n    deleteSiteSectionBackground: function (resp) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTION_BACKGROUND,\n        resp: resp\n      };\n    }\n  });\n\n})(window, window.ActionTypes, window.sync);\n","(function (window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    siteSections: function (state, action) {\n      var path,\n          site_name,\n          order,\n          prop,\n          value;\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.site_sections);\n\n\n        case ActionTypes.CREATE_SITE_SECTION:\n          return state.set(state.size, Immutable.fromJS(action.resp));\n\n\n        case ActionTypes.UPDATE_SITE_SECTION:\n          path = action.resp.path.split('/');\n          site_name = path[0] === '0' ? '' : path[0];\n          order = parseInt(path[2], 10);\n          value = action.resp.value;\n          prop = path.slice(3); // \"title\" or \"@attributes/published\"\n\n          return state.map(function (section) {\n            if (section.get('site_name') === site_name && section.get('order') === order && section.getIn(prop) !== value) {\n              return section.merge(action.resp.section);\n            }\n            return section;\n          });\n\n\n        case ActionTypes.RENAME_SITE_SECTIONS_SITENAME:\n          var old_name = action.data.site.get('name');\n          value = action.data.site_name;\n\n          return state.map(function (section) {\n            if (section.get('site_name') === old_name) {\n              return section.set('site_name', value);\n            }\n            return section;\n          });\n\n\n        case ActionTypes.RESET_SITE_SECTION:\n          path = action.path.split('/');\n          site_name = path[0] === '0' ? '' : path[0];\n          order = parseInt(path[2], 10);\n          prop = path.slice(3);\n\n          return state.map(function (section) {\n            if (section.get('site_name') === site_name && section.get('order') === order) {\n              return section.deleteIn(prop);\n            }\n            return section;\n          });\n\n\n        case ActionTypes.ORDER_SITE_SECTIONS:\n          return state.map(function (section) {\n            if (section.get('site_name') === action.resp.site) {\n              var order = action.resp.sections.indexOf(section.get('name'));\n\n              if (section.get('order') !== order) {\n                return section.set('order', order);\n              }\n            }\n            return section;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SECTION:\n          site_name = action.resp.site === '0' ? '' : action.resp.site;\n          order = -1;\n\n          return state.filter(function (section) {\n            return !(section.get('name') === action.resp.name && section.get('site_name') === site_name);\n\n            // Update order\n          }).map(function (section) {\n            if (section.get('site_name') === site_name) {\n              order++;\n\n              if (section.get('order') !== order) {\n                return section.set('order', order);\n              }\n            }\n            return section;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SECTIONS:\n          return state.filter(function (section) {\n            return section.get('site_name') !== action.data.site_name;\n          });\n\n\n        case ActionTypes.ORDER_SITE_SECTION_BACKGROUNDS:\n          return state.map(function (section) {\n            if (section.get('site_name') === action.resp.site && section.get('name') === action.resp.section) {\n              return section\n                .set('mediafolder', action.resp.mediafolder)\n                .setIn(['mediaCacheData', 'file'], action.resp.files);\n            }\n            return section;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function (window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    addSiteSectionsTags: function (data) {\n      return {\n        type: ActionTypes.ADD_SITE_SECTIONS_TAGS,\n        data: data\n      };\n    },\n\n    addSectionTags: function (data) {\n      return {\n        type: ActionTypes.ADD_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    initOrderSectionTags: function (site, section, tag, value, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_ORDER_SECTION_TAGS\n        });\n\n        sync(window.Berta.urls.sectionTags, {\n          site: site,\n          section: section,\n          tag: tag,\n          value: value\n        }, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSectionTags(response));\n            }\n            onComplete();\n          });\n      };\n    },\n\n    orderSectionTags: function (data) {\n      return {\n        type: ActionTypes.ORDER_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    renameSectionTags: function (data) {\n      return {\n        type: ActionTypes.RENAME_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    updateSectionTags: function (data) {\n      return {\n        type: ActionTypes.UPDATE_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    renameSectionTagsSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SECTION_TAGS_SITENAME,\n        data: data\n      };\n    },\n\n    deleteSectionTags: function (data) {\n      return {\n        type: ActionTypes.DELETE_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    deleteSiteSectionsTags: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTIONS_TAGS,\n        data: data\n      };\n    }\n\n  });\n\n})(window, window.ActionTypes, window.sync);\n","(function (window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    sectionTags: function (state, action) {\n      var site_name = [];\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.section_tags);\n\n\n        case ActionTypes.ADD_SITE_SECTIONS_TAGS:\n          return state.set(action.data.site_name, action.data.tags);\n\n\n        case ActionTypes.ADD_SECTION_TAGS:\n          return state.map(function (site, site_name) {\n            if (action.data.site_name === site_name) {\n              return site.map(function (sections) {\n                return sections.set(sections.size, Immutable.fromJS(action.data.tags));\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.ORDER_SECTION_TAGS:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (sections) {\n                return sections.map(function (section) {\n                  if (section.getIn(['@attributes', 'name']) === action.data.section_name) {\n                    var tags = section.get('tag').map(function (tag) {\n                      return tag.set('order', action.data.order.indexOf(tag.getIn(['@attributes', 'name'])));\n                    });\n\n                    return section.set('tag', tags);\n                  }\n                  return section;\n                });\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.UPDATE_SECTION_TAGS:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (sections) {\n                return sections.map(function (section) {\n\n                  if (section.getIn(['@attributes', 'name']) === action.data.section_name) {\n                    return section.merge(action.data.tags.tags);\n                  }\n                  return section;\n                });\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.RENAME_SECTION_TAGS:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (sections) {\n                return sections.map(function (section) {\n\n                  if (section.getIn(['@attributes', 'name']) === action.data.section_old_name) {\n\n                    return section.setIn(\n                      ['@attributes', 'name'],\n                      action.data.section_name\n                    );\n                  }\n                  return section;\n                });\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.RENAME_SECTION_TAGS_SITENAME:\n          var site_old_name = action.data.site.get('name');\n\n          return state.mapKeys(function (site_name) {\n            if (site_name === site_old_name) {\n              return action.data.site_name;\n            }\n            return site_name;\n          });\n\n\n        case ActionTypes.DELETE_SECTION_TAGS:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (sections) {\n                return sections.filter(function (section) {\n                  return section.getIn(['@attributes', 'name']) !== action.data.section_name;\n                });\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SECTIONS_TAGS:\n          return state.filter(function (tags, site_name) {\n            return site_name !== action.data.site_name;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function (window, sync, Actions, ActionTypes) {\n  'use strict';\n\n  window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    addSiteSectionsEntries: function (data) {\n      return {\n        type: ActionTypes.ADD_SITE_SECTIONS_ENTRIES,\n        data: data\n      };\n    },\n\n\n    addSectionEntries: function (data) {\n      return {\n        type: ActionTypes.ADD_SECTION_ENTRIES,\n        data: data\n      };\n    },\n\n\n    initUpdateSectionEntry: function (path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SECTION_ENTRY\n        });\n\n        sync(window.Berta.urls.sectionEntries, {\n          path: path,\n          value: value\n        })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSectionEntry(response));\n\n              if (response.section) {\n                dispatch({\n                  type: ActionTypes.INIT_UPDATE_SITE_SECTION\n                });\n\n                dispatch(Actions.updateSiteSection({\n                  'path': response.site_name + '/section/' + response.section_order + '/@attributes/has_direct_content',\n                  'section': response.section,\n                  'value': response.has_direct_content\n                }));\n              }\n\n              if (response.tags) {\n                dispatch(Actions.updateSectionTags(response));\n              }\n            }\n            if (onComplete) {\n              onComplete(response);\n            }\n          });\n      };\n    },\n\n\n    updateSectionEntry: function (resp) {\n      return {\n        type: ActionTypes.UPDATE_SECTION_ENTRY,\n        resp: resp\n      };\n    },\n\n\n    renameSectionEntriesSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SECTION_ENTRIES_SITENAME,\n        data: data\n      };\n    },\n\n\n    renameSectionEntries: function (data) {\n      return {\n        type: ActionTypes.RENAME_SECTION_ENTRIES,\n        data: data\n      };\n    },\n\n    initOrderSectionEntries: function (site, section, entryId, value) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_ORDER_SECTION_ENTRIES\n        });\n\n        sync(window.Berta.urls.sectionEntries, {\n          site: site,\n          section: section,\n          entryId: entryId,\n          value: value\n        }, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSectionEntries(response));\n            }\n          });\n      };\n    },\n\n    orderSectionEntries: function (data) {\n      return {\n        type: ActionTypes.ORDER_SECTION_ENTRIES,\n        data: data\n      };\n    },\n\n    initDeleteSectionEntry: function (site, section, entryId, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_DELETE_SECTION_ENTRY\n        });\n        dispatch({\n          type: ActionTypes.INIT_UPDATE_SITE_SECTION\n        });\n\n        sync(window.Berta.urls.sectionEntries, {\n          site: site,\n          section: section,\n          entryId: entryId\n        }, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteSectionEntry(response));\n\n              dispatch(Actions.updateSiteSection({\n                'path': response.site_name + '/section/' + response.section_order + '/@attributes/entry_count',\n                'section': response.section,\n                'value': response.entry_count\n              }));\n\n              dispatch(Actions.updateSiteSection({\n                'path': response.site_name + '/section/' + response.section_order + '/@attributes/has_direct_content',\n                'section': response.section,\n                'value': response.has_direct_content\n              }));\n\n              dispatch(Actions.updateSectionTags(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    deleteSectionEntry: function (resp) {\n      return {\n        type: ActionTypes.DELETE_SECTION_ENTRY,\n        resp: resp\n      };\n    },\n\n\n    deleteSiteSectionsEntries: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTIONS_ENTRIES,\n        data: data\n      };\n    },\n\n\n    deleteSectionEntries: function (data) {\n      return {\n        type: ActionTypes.DELETE_SECTION_ENTRIES,\n        data: data\n      };\n    },\n\n\n    initOrderSectionEntryGallery: function (site, section, entryId, files, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_ORDER_SECTION_ENTRY_GALLERY\n        });\n\n        sync(window.Berta.urls.entryGallery, {\n          site: site,\n          section: section,\n          entryId: entryId,\n          files: files\n        }, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSectionEntryGallery(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    orderSectionEntryGallery: function (resp) {\n      return {\n        type: ActionTypes.ORDER_SECTION_ENTRY_GALLERY,\n        resp: resp\n      };\n    },\n\n\n    initDeleteEntryGalleryImage: function (site, section, entryId, file, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.INIT_DELETE_ENTRY_GALLERY_IMAGE\n        });\n\n        sync(window.Berta.urls.entryGallery, {\n          site: site,\n          section: section,\n          entryId: entryId,\n          file: file\n        }, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteEntryGalleryImage(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    // There is no reducer for this action at the moment\n    // `orderSectionEntryGallery` is called after delete which updates state\n    deleteEntryGalleryImage: function (resp) {\n      return {\n        type: ActionTypes.DELETE_ENTRY_GALLERY_IMAGE,\n        resp: resp\n      };\n    }\n  });\n\n})(window, window.sync, window.Actions, window.ActionTypes);\n","(function (window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    sectionEntries: function (state, action) {\n      var site_name;\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.sectionEntries);\n\n\n        case ActionTypes.ADD_SITE_SECTIONS_ENTRIES:\n          return state.set(action.data.site_name, action.data.entries);\n\n\n        case ActionTypes.ADD_SECTION_ENTRIES:\n          return state.map(function (site, site_name) {\n            if (site_name === action.data.site_name) {\n              return site.concat(Immutable.fromJS(action.data.entries));\n            }\n            return site;\n          });\n\n\n        case ActionTypes.UPDATE_SECTION_ENTRY:\n          var path = action.resp.path.split('/');\n          var siteName = path[0] === '0' ? '' : path[0];\n          var sectionName = path[2];\n          var entryId = path[3];\n\n          var index = state.get(siteName).findIndex(function (entry) {\n            return entry.get('id') === entryId && entry.get('sectionName') === sectionName;\n          });\n\n          if (index < 0) {\n            return state;\n          }\n\n          return state.setIn(\n            [siteName, index],\n            state.getIn([siteName, index]).merge(action.resp.entry)\n          );\n\n\n        case ActionTypes.RENAME_SECTION_ENTRIES_SITENAME:\n          var site_old_name = action.data.site.get('name');\n\n          return state.mapKeys(function (site_name) {\n            if (site_name === site_old_name) {\n              return action.data.site_name;\n            }\n            return site_name;\n          });\n\n\n        case ActionTypes.RENAME_SECTION_ENTRIES:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (entry) {\n                if (entry.get('sectionName') === action.data.section_old_name) {\n                  return entry.set('sectionName', action.data.section_name);\n                }\n                return entry;\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.ORDER_SECTION_ENTRIES:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (entry) {\n                if (entry.get('sectionName') === action.data.section_name) {\n                  return entry.set('order', action.data.order.indexOf(entry.get('id')));\n                }\n                return entry;\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.DELETE_SECTION_ENTRY:\n          site_name = action.resp.site_name === '0' ? '' : action.resp.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.filter(function (entry) {\n                return !(entry.get('sectionName') === action.resp.section_name && entry.get('id') === action.resp.entry_id);\n              }).map(function (entry) {\n                if (entry.get('sectionName') === action.resp.section_name && entry.get('order') > action.resp.entry_order) {\n                  return entry.set('order', entry.get('order') - 1);\n                }\n                return entry;\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SECTIONS_ENTRIES:\n          return state.filter(function (entries, site_name) {\n            return site_name !== action.data.site_name;\n          });\n\n\n        case ActionTypes.DELETE_SECTION_ENTRIES:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, s) {\n            if (site_name === s) {\n              return site.filter(function (entry) {\n                return entry.get('sectionName') !== action.data.section_name;\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.ORDER_SECTION_ENTRY_GALLERY:\n          return state.map(function (site, site_name) {\n            if (site_name === action.resp.site) {\n              return site.map(function (entry) {\n                if (entry.get('sectionName') === action.resp.section && entry.get('id') === action.resp.entry_id) {\n                  return entry\n                    .set('mediafolder', action.resp.mediafolder)\n                    .setIn(['mediaCacheData', 'file'], action.resp.files);\n                }\n                return entry;\n              });\n            }\n            return site;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    siteTemplates: function(state, action) {\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.siteTemplates);\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function(window, Redux, reducers) {\n  'use strict';\n\n  window.root_reducer = Redux.combineReducers(reducers);\n})(window, window.Redux, window.reducers);\n","(function (window, Redux, ReduxThunk, Actions, Templates, domReady, getCurrentSite) {\n  'use strict';\n\n  domReady(Templates.load);\n\n  var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;\n  window.redux_store = Redux.createStore(\n    window.root_reducer,\n    {},\n    composeEnhancers(\n      Redux.applyMiddleware(ReduxThunk.default)\n    )\n  );\n\n  var site = getCurrentSite();\n  window.redux_store.dispatch(Actions.getState(site));\n\n})(window, window.Redux, window.ReduxThunk, window.Actions, window.Templates, window.domReady, window.getCurrentSite);\n"]}