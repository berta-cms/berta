{"version":3,"sources":["namespace.js","utils.js","constants.js","action-types.js","state.actions.js","sites.actions.js","sites.reducer.js","site-settings.actions.js","site-settings.reducer.js","site-template-settings.actions.js","site-template-settings.reducer.js","site-sections.actions.js","site-sections.reducer.js","section-tags.actions.js","section-tags.reducer.js","section-entries.actions.js","section-entries.reducer.js","site-templates.reducer.js","reducers.js","index.js"],"names":["window","Berta","document","redux_store","sync","url","data","method","fetch","credentials","headers","Accept","Content-Type","body","undefined","JSON","stringify","then","response","json","error","console","message","getQueryParams","pairs","location","search","slice","split","result","forEach","pair","decodeURIComponent","getCurrentSite","q","site","escapeHTML","str","div","createElement","text","createTextNode","appendChild","innerHTML","getAllTemplates","templates","getState","siteTemplates","toJSON","Object","getOwnPropertyNames","Templates","load","templateList","getElementById","Array","prototype","call","querySelectorAll","template","getAttribute","this","bind","get","name","ctx","tpl","replace","match","domReady","callback","ready","detach","addEventListener","removeEventListener","completed","detachEvent","event","type","readyState","attachEvent","top","frameElement","documentElement","e","doScroll","scrollCheck","setTimeout","editables","xEditable","xEditableColor","xEditableSelect","xEditableSelectRC","xEditableFontSelect","xEditableImage","xEditableICO","xEditableTA","xEditableMCE","xEditableMCESimple","xEditableRC","xEditableYesNo","xEmpty","formats","longtext","richtext","color","image","icon","select","fontselect","ActionTypes","GET_STATE","SET_STATE","INIT_CREATE_SITE","CREATE_SITE","INIT_UPDATE_SITE","UPDATE_SITE","INIT_ORDER_SITES","ORDER_SITES","INIT_DELETE_SITE","DELETE_SITE","CREATE_SITE_SETTINGS","INIT_UPDATE_SITE_SETTINGS","UPDATE_SITE_SETTINGS","RENAME_SITE_SETTINGS_SITENAME","INIT_DELETE_SITE_SETTINGS","DELETE_SITE_SETTINGS","CREATE_SITE_TEMPLATE_SETTINGS","INIT_UPDATE_SITE_TEMPLATE_SETTINGS","UPDATE_SITE_TEMPLATE_SETTINGS","RENAME_SITE_TEMPLATE_SETTINGS_SITENAME","INIT_DELETE_SITE_TEMPLATE_SETTINGS","DELETE_SITE_TEMPLATE_SETTINGS","INIT_CREATE_SITE_SECTION","CREATE_SITE_SECTION","INIT_UPDATE_SITE_SECTION","UPDATE_SITE_SECTION","RENAME_SITE_SECTIONS_SITENAME","RESET_SITE_SECTION","INIT_ORDER_SITE_SECTIONS","ORDER_SITE_SECTIONS","INIT_DELETE_SITE_SECTION","DELETE_SITE_SECTION","INIT_DELETE_SITE_SECTIONS","DELETE_SITE_SECTIONS","INIT_ORDER_SITE_SECTION_BACKGROUNDS","ORDER_SITE_SECTION_BACKGROUNDS","INIT_DELETE_SITE_SECTION_BACKGROUND","DELETE_SITE_SECTION_BACKGROUND","ADD_SECTION_TAGS","ADD_SITE_SECTIONS_TAGS","INIT_UPDATE_SECTION_TAGS","UPDATE_SECTION_TAGS","RENAME_SECTION_TAGS","RENAME_SECTION_TAGS_SITENAME","DELETE_SECTION_TAGS","INIT_DELETE_SITE_SECTIONS_TAGS","DELETE_SITE_SECTIONS_TAGS","ADD_SITE_SECTIONS_ENTRIES","ADD_SECTION_ENTRIES","INIT_UPDATE_SECTION_ENTRY","UPDATE_SECTION_ENTRY","INIT_UPDATE_SECTION_ENTRIES","RENAME_SECTION_ENTRIES_SITENAME","RENAME_SECTION_ENTRIES","INIT_ORDER_SECTION_ENTRY_GALLERY","ORDER_SECTION_ENTRY_GALLERY","INIT_DELETE_ENTRY_GALLERY_IMAGE","DELETE_ENTRY_GALLERY_IMAGE","INIT_DELETE_SECTION_ENTRY","DELETE_SECTION_ENTRY","INIT_DELETE_SITE_SECTIONS_ENTRIES","DELETE_SITE_SECTIONS_ENTRIES","INIT_DELETE_SECTION_ENTRIES","DELETE_SECTION_ENTRIES","Actions","assign","dispatch","error_message","setState","state","urls","initCreateSite","onComplete","sites","createSite","settings","createSiteSettings","sections","length","i","createSiteSection","entries","addSiteSectionsEntries","site_name","tags","section","addSiteSectionsTags","siteTemplateSettings","createSiteTemplateSettings","initUpdateSite","path","value","updateSite","resp","renameSite","getStore","order","parseInt","find","renameSiteSectionsSitename","renameSiteSettingsSitename","renameSiteTemplateSettingsSitename","renameSectionTagsSitename","renameSectionEntriesSitename","initOrderSites","orderSites","initdeleteSite","deleteSite","deleteSiteSections","deleteSiteSettings","deleteSiteTemplateSettings","deleteSiteSectionsTags","deleteSiteSectionsEntries","Immutable","reducers","action","Map","fromJS","set","size","prop","map","getIn","setIn","new_order","indexOf","filter","initUpdateSiteSettings","siteSettings","updateSiteSettings","site_settings","section_old_name","mapKeys","k","initUpdateSiteTemplateSettings","updateSiteTemplateSettings","site_template_settings","initCreateSiteSection","title","siteSections","addSectionTags","addSectionEntries","initUpdateSiteSection","updateSiteSection","initRenameSiteSection","renameSectionTags","section_name","old_name","renameSectionEntries","resetSiteSection","siteSectionsReset","initOrderSiteSections","orderSiteSections","initDeleteSiteSection","deleteSiteSection","deleteSectionTags","deleteSectionEntries","initOrderSiteSectionBackgrounds","files","siteSectionBackgrounds","orderSiteSectionBackgrounds","initDeleteSiteSectionBackground","file","deleteSiteSectionBackground","site_sections","merge","deleteIn","mediafolder","updateSectionTags","sectionTags","section_tags","site_old_name","initUpdateSectionEntry","sectionEntries","updateSectionEntry","section_order","has_direct_content","initDeleteSectionEntry","entryId","deleteSectionEntry","entry_count","initOrderSectionEntryGallery","entryGallery","orderSectionEntryGallery","initDeleteEntryGalleryImage","deleteEntryGalleryImage","concat","siteName","sectionName","index","findIndex","entry","entry_id","entry_order","s","Redux","root_reducer","combineReducers","ReduxThunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware"],"mappings":"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","file":"../ng-backend.min.js","sourcesContent":["window.Berta = {};\n","(function(window, document, redux_store) {\n  'use strict';\n  /** @todo: move helpers to Berta namespace */\n\n  window.sync = function (url, data, method) {\n    method = method || 'PATCH';\n    return fetch(\n      url,\n      {\n        method: method,\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: method === 'GET' ? undefined : JSON.stringify(data)\n      }\n    )\n      .then(function (response) {\n        return response.json();\n      })\n      .catch(function (error) {\n        /** @todo: create error state/reducer to manage failed requests and other app errors */\n        console.error('Request failed:', error.message);\n      });\n  };\n\n  window.getQueryParams = function getQueryParams() {\n    var pairs = location.search.slice(1).split('&');\n    var result = {};\n\n    pairs.forEach(function(pair) {\n      if (pair[0]) {\n        pair = pair.split('=');\n        result[pair[0]] = decodeURIComponent(pair[1] || '');\n      }\n    });\n\n    return result;\n  };\n\n  window.getCurrentSite = function getCurrentSite() {\n    var q = window.getQueryParams();\n    return q.site === undefined ? '' : q.site;\n  };\n\n  window.escapeHTML = function escapeHTML(str) {\n    var div = document.createElement('div');\n    var text = document.createTextNode(str);\n    div.appendChild(text);\n    return div.innerHTML;\n  };\n\n  window.getAllTemplates = function getAllTemplates() {\n    var templates = redux_store.getState().siteTemplates.toJSON();\n\n    return Object.getOwnPropertyNames(templates);\n  };\n\n  var Templates = {\n    templates: {}\n  };\n\n  Templates.load = function load() {\n    var templateList = document.getElementById('templateList');\n\n    if (templateList) {\n      var templates = Array.prototype.slice.call(\n        templateList.querySelectorAll('script'),\n        0\n      );\n\n      templates.forEach(function(template){\n        if(template.getAttribute('type') === 'text/template'){\n          this.templates[template.getAttribute('id')] = template.innerHTML;\n        }\n      }.bind(this));\n    }\n  }.bind(Templates);\n\n  Templates.get = function get(name, ctx) {\n    var tpl = this.templates[name];\n\n    return tpl.replace(/<%=([^%>]+)%>/g, function(str, match) {\n      return ctx[match];\n    });\n  }.bind(Templates);\n\n  window.Templates = Templates;\n\n  window.domReady = function(callback) {\n    var ready = false,\n        detach = function() {\n          if(document.addEventListener) {\n            document.removeEventListener('DOMContentLoaded', completed);\n            window.removeEventListener('load', completed);\n          } else {\n            document.detachEvent('onreadystatechange', completed);\n            window.detachEvent('onload', completed);\n          }\n        },\n        completed = function() {\n          if(!ready && (document.addEventListener || event.type === 'load' || document.readyState === 'complete')) {\n            ready = true;\n            detach();\n            callback();\n          }\n        };\n\n    if(document.readyState === 'complete') {\n      callback();\n    } else if(document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', completed);\n      window.addEventListener('load', completed);\n    } else {\n      document.attachEvent('onreadystatechange', completed);\n      window.attachEvent('onload', completed);\n\n      var top = false;\n\n      try {\n        top = window.frameElement === null && document.documentElement;\n      } catch(e) { /* skip */}\n\n      if(top && top.doScroll) {\n        (function scrollCheck() {\n          if(ready) return;\n\n          try {\n            top.doScroll('left');\n          } catch(e) {\n            return setTimeout(scrollCheck, 50);\n          }\n\n          ready = true;\n          detach();\n          callback();\n        })();\n      }\n    }\n  };\n})(window, document, window.redux_store);\n","(function(window) {\n  'use strict';\n\n  window.editables = {\n    xEditable: 'xEditable',                     // simple input\n    xEditableColor: 'xEditableColor',           // simple input\n    xEditableSelect: 'xEditableSelect',         // select\n    xEditableSelectRC: 'xEditableSelectRC',     // select\n    xEditableFontSelect: 'xEditableFontSelect', // select\n    xEditableImage: 'xEditableImage',           // image upload\n    xEditableICO: 'xEditableICO',               // ico upload\n    xEditableTA: 'xEditableTA',                 // textarea\n    xEditableMCE: 'xEditableMCE',               // textarea\n    xEditableMCESimple: 'xEditableMCESimple',   // textarea\n    xEditableRC: 'xEditableRC',                 // with \"real\" content\n    xEditableYesNo: 'xEditableYesNo',           // the \"yes/no\" switch\n    xEmpty: 'xEmpty'\n  };\n\n  window.formats = {\n    text: window.editables.xEditable,\n    longtext: window.editables.xEditableTA,\n    richtext: window.editables.xEditableMCESimple,\n    color: window.editables.xEditableColor,\n    image: window.editables.xEditableImage,\n    icon: window.editables.xEditableICO,\n    select: window.editables.xEditableSelectRC,\n    fontselect: window.editables.xEditableFontSelect\n  };\n\n})(window);\n","(function(window) {\n  'use strict';\n\n  window.ActionTypes = {\n    GET_STATE: 'GET_STATE',\n    SET_STATE: 'SET_STATE',\n\n    INIT_CREATE_SITE: 'INIT_CREATE_SITE',\n    CREATE_SITE: 'CREATE_SITE',\n    INIT_UPDATE_SITE: 'INIT_UPDATE_SITE',\n    UPDATE_SITE: 'UPDATE_SITE',\n    INIT_ORDER_SITES: 'INIT_ORDER_SITES',\n    ORDER_SITES: 'ORDER_SITES',\n    INIT_DELETE_SITE: 'INIT_DELETE_SITE',\n    DELETE_SITE: 'DELETE_SITE',\n\n    CREATE_SITE_SETTINGS: 'CREATE_SITE_SETTINGS',\n    INIT_UPDATE_SITE_SETTINGS: 'INIT_UPDATE_SITE_SETTINGS',\n    UPDATE_SITE_SETTINGS: 'UPDATE_SITE_SETTINGS',\n    RENAME_SITE_SETTINGS_SITENAME: 'RENAME_SITE_SETTINGS_SITENAME',\n    INIT_DELETE_SITE_SETTINGS: 'INIT_DELETE_SITE_SETTINGS',\n    DELETE_SITE_SETTINGS: 'DELETE_SITE_SETTINGS',\n\n    CREATE_SITE_TEMPLATE_SETTINGS: 'CREATE_SITE_TEMPLATE_SETTINGS',\n    INIT_UPDATE_SITE_TEMPLATE_SETTINGS: 'INIT_UPDATE_SITE_TEMPLATE_SETTINGS',\n    UPDATE_SITE_TEMPLATE_SETTINGS: 'UPDATE_SITE_TEMPLATE_SETTINGS',\n    RENAME_SITE_TEMPLATE_SETTINGS_SITENAME: 'RENAME_SITE_TEMPLATE_SETTINGS_SITENAME',\n    INIT_DELETE_SITE_TEMPLATE_SETTINGS: 'INIT_DELETE_SITE_TEMPLATE_SETTINGS',\n    DELETE_SITE_TEMPLATE_SETTINGS: 'DELETE_SITE_TEMPLATE_SETTINGS',\n\n    INIT_CREATE_SITE_SECTION: 'INIT_CREATE_SITE_SECTION',\n    CREATE_SITE_SECTION: 'CREATE_SITE_SECTION',\n    INIT_UPDATE_SITE_SECTION: 'INIT_UPDATE_SITE_SECTION',\n    UPDATE_SITE_SECTION: 'UPDATE_SITE_SECTION',\n    RENAME_SITE_SECTIONS_SITENAME: 'RENAME_SITE_SECTIONS_SITENAME',\n    RESET_SITE_SECTION: 'RESET_SITE_SECTION',\n    INIT_ORDER_SITE_SECTIONS: 'INIT_ORDER_SITE_SECTIONS',\n    ORDER_SITE_SECTIONS: 'ORDER_SITE_SECTIONS',\n    INIT_DELETE_SITE_SECTION: 'INIT_DELETE_SITE_SECTION',\n    DELETE_SITE_SECTION: 'DELETE_SITE_SECTION',\n    INIT_DELETE_SITE_SECTIONS:'INIT_DELETE_SITE_SECTIONS',\n    DELETE_SITE_SECTIONS: 'DELETE_SITE_SECTIONS',\n\n    INIT_ORDER_SITE_SECTION_BACKGROUNDS: 'INIT_ORDER_SITE_SECTION_BACKGROUNDS',\n    ORDER_SITE_SECTION_BACKGROUNDS: 'ORDER_SITE_SECTION_BACKGROUNDS',\n    INIT_DELETE_SITE_SECTION_BACKGROUND: 'INIT_DELETE_SITE_SECTION_BACKGROUND',\n    DELETE_SITE_SECTION_BACKGROUND: 'DELETE_SITE_SECTION_BACKGROUND',\n\n    ADD_SECTION_TAGS: 'ADD_SECTION_TAGS',\n    ADD_SITE_SECTIONS_TAGS: 'ADD_SITE_SECTIONS_TAGS',\n    INIT_UPDATE_SECTION_TAGS: 'INIT_UPDATE_SECTION_TAGS',\n    UPDATE_SECTION_TAGS: 'UPDATE_SECTION_TAGS',\n    RENAME_SECTION_TAGS: 'RENAME_SECTION_TAGS',\n    RENAME_SECTION_TAGS_SITENAME: 'RENAME_SECTION_TAGS_SITENAME',\n    DELETE_SECTION_TAGS: 'DELETE_SECTION_TAGS',\n    INIT_DELETE_SITE_SECTIONS_TAGS: 'INIT_DELETE_SITE_SECTIONS_TAGS',\n    DELETE_SITE_SECTIONS_TAGS: 'DELETE_SITE_SECTIONS_TAGS',\n\n    ADD_SITE_SECTIONS_ENTRIES: 'ADD_SITE_SECTIONS_ENTRIES',\n    ADD_SECTION_ENTRIES: 'ADD_SECTION_ENTRIES',\n    INIT_UPDATE_SECTION_ENTRY: 'INIT_UPDATE_SECTION_ENTRY',\n    UPDATE_SECTION_ENTRY: 'UPDATE_SECTION_ENTRY',\n    INIT_UPDATE_SECTION_ENTRIES: 'INIT_UPDATE_SECTION_ENTRIES',\n    RENAME_SECTION_ENTRIES_SITENAME: 'RENAME_SECTION_ENTRIES_SITENAME',\n    RENAME_SECTION_ENTRIES: 'RENAME_SECTION_ENTRIES',\n    INIT_ORDER_SECTION_ENTRY_GALLERY: 'INIT_ORDER_SECTION_ENTRY_GALLERY',\n    ORDER_SECTION_ENTRY_GALLERY: 'ORDER_SECTION_ENTRY_GALLERY',\n    INIT_DELETE_ENTRY_GALLERY_IMAGE: 'INIT_DELETE_ENTRY_GALLERY_IMAGE',\n    DELETE_ENTRY_GALLERY_IMAGE: 'DELETE_ENTRY_GALLERY_IMAGE',\n    INIT_DELETE_SECTION_ENTRY: 'INIT_DELETE_SECTION_ENTRY',\n    DELETE_SECTION_ENTRY: 'DELETE_SECTION_ENTRY',\n    INIT_DELETE_SITE_SECTIONS_ENTRIES: 'INIT_DELETE_SITE_SECTIONS_ENTRIES',\n    DELETE_SITE_SECTIONS_ENTRIES: 'DELETE_SITE_SECTIONS_ENTRIES',\n    INIT_DELETE_SECTION_ENTRIES: 'INIT_DELETE_SECTION_ENTRIES',\n    DELETE_SECTION_ENTRIES: 'DELETE_SECTION_ENTRIES'\n  };\n})(window);\n","(function(window, Berta, ActionTypes, sync) {\n  'use strict';\n\n  window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    getState: function(site) {\n      site = site ? site : '0';\n      var url = '/_api/v1/state/' + site;\n\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.GET_STATE });\n\n        sync(url, {}, 'GET')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(window.Actions.setState(response));\n            }\n          });\n      };\n    },\n\n\n    setState: function(state) {\n      Berta.urls = state.urls;\n\n      return {\n        type: ActionTypes.SET_STATE,\n        state: state\n      };\n    }\n  });\n})(window, window.Berta, window.ActionTypes, window.sync);\n","(function(window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    initCreateSite: function (site, onComplete) {\n      return function (dispatch) {\n\n        dispatch({ type: ActionTypes.INIT_CREATE_SITE });\n\n        sync(window.Berta.urls.sites, {site: site}, 'POST')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.createSite(response.site));\n\n              if (response.settings) {\n                dispatch(Actions.createSiteSettings(response.site.name, response.settings));\n              }\n\n              if (response.sections && response.sections.length) {\n                for (var i = 0; i < response.sections.length; i++) {\n                  dispatch(Actions.createSiteSection(response.sections[i]));\n                }\n              }\n\n              if (response.entries && response.entries.length) {\n                dispatch(Actions.addSiteSectionsEntries({\n                  site_name: response.site.name,\n                  entries: response.entries\n                }));\n              }\n\n              if (response.tags && response.tags.section) {\n                dispatch(Actions.addSiteSectionsTags({\n                  site_name: response.site.name,\n                  tags: response.tags\n                }));\n              }\n\n              if (response.siteTemplateSettings) {\n                dispatch(Actions.createSiteTemplateSettings(response.site.name, response.siteTemplateSettings));\n              }\n            }\n            onComplete(response.site);\n          });\n      };\n    },\n\n    createSite: function(data) {\n      return {\n        type: ActionTypes.CREATE_SITE,\n        data: data\n      };\n    },\n\n    initUpdateSite: function(path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE });\n\n        sync(window.Berta.urls.sites, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSite(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    updateSite: function(resp) {\n      return {\n        type: ActionTypes.UPDATE_SITE,\n        resp: resp\n      };\n    },\n\n    renameSite: function (path, value, onComplete) {\n      return function (dispatch, getStore) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SECTION });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SETTINGS });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_TEMPLATE_SETTINGS });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SECTION_TAGS });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SECTION_ENTRIES });\n\n        sync(window.Berta.urls.sites, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              path = path.split('/');\n              var order = parseInt(path[1], 10);\n              var site = getStore().sites.find(function (site) {\n                return site.get('order') === order;\n              });\n\n              dispatch(Actions.updateSite(response));\n              dispatch(Actions.renameSiteSectionsSitename({\n                site: site,\n                site_name: response.value\n              }));\n              dispatch(Actions.renameSiteSettingsSitename({\n                site: site,\n                site_name: response.value\n              }));\n              dispatch(Actions.renameSiteTemplateSettingsSitename({\n                site: site,\n                site_name: response.value\n              }));\n              dispatch(Actions.renameSectionTagsSitename({\n                site: site,\n                site_name: response.value\n              }));\n              dispatch(Actions.renameSectionEntriesSitename({\n                site: site,\n                site_name: response.value\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    initOrderSites: function(sites, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_ORDER_SITES });\n\n        sync(window.Berta.urls.sites, sites, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSites(sites));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    orderSites: function(resp) {\n      return {\n        type: ActionTypes.ORDER_SITES,\n        resp: resp\n      };\n    },\n\n    initdeleteSite: function(site, onComplete) {\n      return function (dispatch) {\n\n        // @TODO also delete related: entries\n\n        dispatch({ type: ActionTypes.INIT_DELETE_SITE });\n        dispatch({ type: ActionTypes.INIT_DELETE_SITE_SECTIONS });\n        dispatch({ type: ActionTypes.INIT_DELETE_SITE_SETTINGS });\n        dispatch({ type: ActionTypes.INIT_DELETE_SITE_TEMPLATE_SETTINGS });\n        dispatch({ type: ActionTypes.INIT_DELETE_SITE_SECTIONS_TAGS });\n        dispatch({ type: ActionTypes.INIT_DELETE_SITE_SECTIONS_ENTRIES });\n\n        sync(window.Berta.urls.sites, {site: site}, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteSite(response));\n              dispatch(Actions.deleteSiteSections({\n                site_name: response.name\n              }));\n              dispatch(Actions.deleteSiteSettings({\n                site_name: response.name\n              }));\n              dispatch(Actions.deleteSiteTemplateSettings({\n                site_name: response.name\n              }));\n              dispatch(Actions.deleteSiteSectionsTags({\n                site_name: response.name\n              }));\n              dispatch(Actions.deleteSiteSectionsEntries({\n                site_name: response.name\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    deleteSite: function(resp) {\n      return {\n        type: ActionTypes.DELETE_SITE,\n        resp: resp\n      };\n    }\n  });\n})(window, window.ActionTypes, window.sync);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    sites: function(state, action) {\n      var path, value, order;\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.sites);\n\n\n        case ActionTypes.CREATE_SITE:\n          return state.set(state.size, Immutable.fromJS(action.data));\n\n\n        case ActionTypes.UPDATE_SITE:\n          path = action.resp.path.split('/');\n          order = parseInt(path[1], 10);\n          value = action.resp.value;\n          var prop = path.slice(2);  // example \"title\" or \"@attributes/published\"\n\n          return state.map(function (site) {\n            if (site.get('order') === order && site.getIn(prop) !== value) {\n              return site.setIn(prop, value);\n            }\n            return site;\n          });\n\n\n        case ActionTypes.ORDER_SITES:\n          return state.map(function (site) {\n            var name = site.get('name');\n            if (name === '') {\n              name = '0';\n            }\n            var new_order = action.resp.indexOf(name);\n\n            if (site.get('order') !== new_order) {\n              return site.set('order', new_order);\n            }\n            return site;\n          });\n\n\n        case ActionTypes.DELETE_SITE:\n          // Filter out deleted site\n          return state.filter(function (site) {\n            return site.get('name') !== action.resp.name;\n\n          // Update order\n          }).map(function (site, order) {\n            if (site.get('order') !== order) {\n              return site.set('order', order);\n            }\n            return site;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function (window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    createSiteSettings: function (site_name, data) {\n      return {\n        type: ActionTypes.CREATE_SITE_SETTINGS,\n        site_name: site_name,\n        data: data\n      };\n    },\n\n    initUpdateSiteSettings: function(path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SETTINGS });\n\n        sync(window.Berta.urls.siteSettings, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSiteSettings(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    updateSiteSettings: function (resp) {\n      return {\n        type: ActionTypes.UPDATE_SITE_SETTINGS,\n        resp: resp\n      };\n    },\n\n    renameSiteSettingsSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SITE_SETTINGS_SITENAME,\n        data: data\n      };\n    },\n\n    deleteSiteSettings: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_SETTINGS,\n        data: data\n      };\n    },\n  });\n\n})(window, window.ActionTypes, window.sync);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    siteSettings: function(state, action) {\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.site_settings);\n\n\n        case ActionTypes.CREATE_SITE_SETTINGS:\n          return state.setIn([action.site_name], Immutable.fromJS(action.data));\n\n\n        case ActionTypes.UPDATE_SITE_SETTINGS:\n          var path = action.resp.path.split('/').slice(2);\n          var value = action.resp.value;\n\n          return state.setIn(\n            [action.resp.site, path[0], path[1]],\n            value\n          );\n\n\n        case ActionTypes.RENAME_SITE_SETTINGS_SITENAME:\n          var section_old_name = action.data.site.get('name');\n\n          return state.mapKeys(function (k) {\n            if (k === section_old_name) {\n              return action.data.site_name;\n            }\n            return k;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SETTINGS:\n          return state.filter(function (settings, site_name) {\n            return site_name !== action.data.site_name;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function (window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    createSiteTemplateSettings: function(site_name, data) {\n      return {\n        type: ActionTypes.CREATE_SITE_TEMPLATE_SETTINGS,\n        site_name: site_name,\n        data: data\n      };\n    },\n\n    initUpdateSiteTemplateSettings: function(path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_TEMPLATE_SETTINGS });\n\n        sync(window.Berta.urls.siteTemplateSettings, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSiteTemplateSettings(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n    updateSiteTemplateSettings: function (resp) {\n      return {\n        type: ActionTypes.UPDATE_SITE_TEMPLATE_SETTINGS,\n        resp: resp\n      };\n    },\n\n    renameSiteTemplateSettingsSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SITE_TEMPLATE_SETTINGS_SITENAME,\n        data: data\n      };\n    },\n\n    deleteSiteTemplateSettings: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_TEMPLATE_SETTINGS,\n        data: data\n      };\n    }\n  });\n\n})(window, window.ActionTypes, window.sync);\n","(function (window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    siteTemplateSettings: function (state, action) {\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.site_template_settings);\n\n\n        case ActionTypes.CREATE_SITE_TEMPLATE_SETTINGS:\n          return state.setIn([action.site_name], Immutable.fromJS(action.data));\n\n\n        case ActionTypes.UPDATE_SITE_TEMPLATE_SETTINGS:\n          var path = action.resp.path.split('/').slice(2);\n          var value = action.resp.value;\n\n          return state.setIn(\n            [action.resp.site, path[0], path[1], path[2]],\n            value\n          );\n\n\n        case ActionTypes.RENAME_SITE_TEMPLATE_SETTINGS_SITENAME:\n          var section_old_name = action.data.site.get('name');\n\n          return state.mapKeys(function (k) {\n            if (k === section_old_name) {\n              return action.data.site_name;\n            }\n            return k;\n          });\n\n\n        case ActionTypes.DELETE_SITE_TEMPLATE_SETTINGS:\n          return state.filter(function (site_template_settings, site_name) {\n            return site_name !== action.data.site_name;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function(window, ActionTypes, sync) {\n  'use strict';\n\n  var Actions = window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    initCreateSiteSection: function(site, name, title, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_CREATE_SITE_SECTION });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SECTION_TAGS });\n\n        sync(window.Berta.urls.siteSections, { site: site, name: name, title: title }, 'POST')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.createSiteSection(response.section));\n\n              if (response.tags) {\n                dispatch(Actions.addSectionTags({\n                  site_name: site,\n                  tags: response.tags\n                }));\n              }\n\n              if (response.entries) {\n                dispatch(Actions.addSectionEntries({\n                  site_name: site,\n                  entries: response.entries\n                }));\n              }\n            }\n            onComplete(response.section);\n          });\n      };\n    },\n\n\n    createSiteSection: function(resp) {\n      return {\n        type: ActionTypes.CREATE_SITE_SECTION,\n        resp: resp\n      };\n    },\n\n\n    initUpdateSiteSection: function(path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SECTION });\n\n        sync(window.Berta.urls.siteSections, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSiteSection(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    updateSiteSection: function(resp) {\n      return {\n        type: ActionTypes.UPDATE_SITE_SECTION,\n        resp: resp\n      };\n    },\n\n\n    initRenameSiteSection: function (path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SECTION });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SECTION_TAGS });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SECTION_ENTRIES });\n\n        sync(window.Berta.urls.siteSections, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSiteSection(response));\n              dispatch(Actions.renameSectionTags({\n                site_name: response.site,\n                section_name: response.section.name,\n                section_old_name: response.old_name\n              }));\n              dispatch(Actions.renameSectionEntries({\n                site_name: response.site,\n                section_name: response.section.name,\n                section_old_name: response.old_name\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    renameSiteSectionsSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SITE_SECTIONS_SITENAME,\n        data: data\n      };\n    },\n\n\n    resetSiteSection: function(path, onComplete) {\n      return function (dispatch) {\n        dispatch({\n          type: ActionTypes.RESET_SITE_SECTION,\n          path: path\n        });\n\n        sync(window.Berta.urls.siteSectionsReset, { path: path })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    initOrderSiteSections: function(site, sections, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_ORDER_SITE_SECTIONS });\n\n        sync(window.Berta.urls.siteSections, {site: site, sections: sections}, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSiteSections({site: site, sections: sections}));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    orderSiteSections: function(resp) {\n      return {\n        type: ActionTypes.ORDER_SITE_SECTIONS,\n        resp: resp\n      };\n    },\n\n\n    initDeleteSiteSection: function(site, section, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_DELETE_SITE_SECTION });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SECTION_TAGS });\n        dispatch({ type: ActionTypes.INIT_DELETE_SECTION_ENTRIES });\n\n        sync(window.Berta.urls.siteSections, {site: site, section: section}, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteSiteSection(response));\n\n              dispatch(Actions.deleteSectionTags({\n                site_name: response.site,\n                section_name: response.name\n              }));\n\n              dispatch(Actions.deleteSectionEntries({\n                site_name: response.site,\n                section_name: response.name\n              }));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    deleteSiteSection: function(resp) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTION,\n        resp: resp\n      };\n    },\n\n\n    deleteSiteSections: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTIONS,\n        data: data\n      };\n    },\n\n\n    initOrderSiteSectionBackgrounds: function(site, section, files, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_ORDER_SITE_SECTION_BACKGROUNDS });\n\n        sync(window.Berta.urls.siteSectionBackgrounds, {site: site, section: section, files: files}, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSiteSectionBackgrounds(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    orderSiteSectionBackgrounds: function(resp) {\n      return {\n        type: ActionTypes.ORDER_SITE_SECTION_BACKGROUNDS,\n        resp: resp\n      };\n    },\n\n\n    initDeleteSiteSectionBackground: function(site, section, file, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_DELETE_SITE_SECTION_BACKGROUND });\n\n        sync(window.Berta.urls.siteSectionBackgrounds, {site: site, section: section, file: file}, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteSiteSectionBackground(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    // There is no reducer for this action at the moment\n    // `orderSiteSectionBackgrounds` is called after delete which updates state\n    deleteSiteSectionBackground: function (resp) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTION_BACKGROUND,\n        resp: resp\n      };\n    }\n  });\n\n})(window, window.ActionTypes, window.sync);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    siteSections: function(state, action) {\n      var path,\n          site_name,\n          order,\n          prop,\n          value;\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.site_sections);\n\n\n        case ActionTypes.CREATE_SITE_SECTION:\n          return state.set(state.size, Immutable.fromJS(action.resp));\n\n\n        case ActionTypes.UPDATE_SITE_SECTION:\n          path = action.resp.path.split('/');\n          site_name = path[0] === '0' ? '' : path[0];\n          order = parseInt(path[2], 10);\n          value = action.resp.value;\n          prop = path.slice(3);  // \"title\" or \"@attributes/published\"\n\n          return state.map(function (section) {\n            if (section.get('site_name') === site_name && section.get('order') === order && section.getIn(prop) !== value) {\n              return section.merge(action.resp.section);\n            }\n            return section;\n          });\n\n\n        case ActionTypes.RENAME_SITE_SECTIONS_SITENAME:\n          var old_name = action.data.site.get('name');\n          value = action.data.site_name;\n\n          return state.map(function (section) {\n            if (section.get('site_name') === old_name) {\n              return section.set('site_name', value);\n            }\n            return section;\n          });\n\n\n        case ActionTypes.RESET_SITE_SECTION:\n          path = action.path.split('/');\n          site_name = path[0] === '0' ? '' : path[0];\n          order = parseInt(path[2], 10);\n          prop = path.slice(3);\n\n          return state.map(function (section) {\n            if (section.get('site_name') === site_name && section.get('order') === order) {\n              return section.deleteIn(prop);\n            }\n            return section;\n          });\n\n\n        case ActionTypes.ORDER_SITE_SECTIONS:\n          return state.map(function (section) {\n            if (section.get('site_name') === action.resp.site) {\n              var order = action.resp.sections.indexOf(section.get('name'));\n\n              if (section.get('order') !== order) {\n                return section.set('order', order);\n              }\n            }\n            return section;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SECTION:\n          site_name = action.resp.site === '0' ? '' : action.resp.site;\n          order = -1;\n\n          return state.filter(function (section) {\n            return !(section.get('name') === action.resp.name && section.get('site_name') === site_name);\n\n          // Update order\n          }).map(function (section) {\n            if (section.get('site_name') === site_name) {\n              order++;\n\n              if (section.get('order') !== order) {\n                return section.set('order', order);\n              }\n            }\n            return section;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SECTIONS:\n          return state.filter(function (section) {\n            return section.get('site_name') !== action.data.site_name;\n          });\n\n\n        case ActionTypes.ORDER_SITE_SECTION_BACKGROUNDS:\n          return state.map(function (section) {\n            if (section.get('site_name') === action.resp.site && section.get('name') === action.resp.section) {\n              return section\n                .set('mediafolder', action.resp.mediafolder)\n                .setIn(['mediaCacheData', 'file'], action.resp.files);\n            }\n            return section;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function(window, ActionTypes) {\n  'use strict';\n\n  window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    addSiteSectionsTags: function (data) {\n      return {\n        type: ActionTypes.ADD_SITE_SECTIONS_TAGS,\n        data: data\n      };\n    },\n\n    addSectionTags: function (data) {\n      return {\n        type: ActionTypes.ADD_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    renameSectionTags: function (data) {\n      return {\n        type: ActionTypes.RENAME_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    updateSectionTags: function (data) {\n      return {\n        type: ActionTypes.UPDATE_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    renameSectionTagsSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SECTION_TAGS_SITENAME,\n        data: data\n      };\n    },\n\n    deleteSectionTags: function (data) {\n      return {\n        type: ActionTypes.DELETE_SECTION_TAGS,\n        data: data\n      };\n    },\n\n    deleteSiteSectionsTags: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTIONS_TAGS,\n        data: data\n      };\n    }\n\n  });\n\n})(window, window.ActionTypes);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    sectionTags: function(state, action) {\n      var site_name = [];\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.section_tags);\n\n\n        case ActionTypes.ADD_SITE_SECTIONS_TAGS:\n          return state.set(action.data.site_name, action.data.tags);\n\n\n        case ActionTypes.ADD_SECTION_TAGS:\n          return state.map(function (site, site_name) {\n            if (action.data.site_name === site_name) {\n              return site.map(function (sections) {\n                return sections.set(sections.size, Immutable.fromJS(action.data.tags));\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.UPDATE_SECTION_TAGS:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (sections) {\n                return sections.map(function (section) {\n\n                  if (section.getIn(['@attributes', 'name']) === action.data.section_name) {\n                    return section.merge(action.data.tags.tags);\n                  }\n                  return section;\n                });\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.RENAME_SECTION_TAGS:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (sections) {\n                return sections.map(function (section) {\n\n                  if (section.getIn(['@attributes', 'name']) === action.data.section_old_name) {\n\n                    return section.setIn(\n                      ['@attributes', 'name'],\n                      action.data.section_name\n                    );\n                  }\n                  return section;\n                });\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.RENAME_SECTION_TAGS_SITENAME:\n          var site_old_name = action.data.site.get('name');\n\n          return state.mapKeys(function (site_name) {\n            if (site_name === site_old_name) {\n              return action.data.site_name;\n            }\n            return site_name;\n          });\n\n\n        case ActionTypes.DELETE_SECTION_TAGS:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (sections) {\n                return sections.filter(function (section) {\n                  return section.getIn(['@attributes', 'name']) !== action.data.section_name;\n                });\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SECTIONS_TAGS:\n          return state.filter(function (tags, site_name) {\n            return site_name !== action.data.site_name;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function(window, sync, Actions, ActionTypes) {\n  'use strict';\n\n  window.Actions = window.Actions || {};\n\n  Object.assign(window.Actions, {\n\n    addSiteSectionsEntries: function (data) {\n      return {\n        type: ActionTypes.ADD_SITE_SECTIONS_ENTRIES,\n        data: data\n      };\n    },\n\n\n    addSectionEntries: function (data) {\n      return {\n        type: ActionTypes.ADD_SECTION_ENTRIES,\n        data: data\n      };\n    },\n\n\n    initUpdateSectionEntry: function(path, value, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_UPDATE_SECTION_ENTRY });\n\n        sync(window.Berta.urls.sectionEntries, { path: path, value: value })\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.updateSectionEntry(response));\n\n              if (response.section) {\n                dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SECTION });\n\n                dispatch(Actions.updateSiteSection({\n                  'path': response.site_name + '/section/' + response.section_order + '/@attributes/has_direct_content',\n                  'section': response.section,\n                  'value': response.has_direct_content\n                }));\n              }\n\n              if (response.tags) {\n                dispatch(Actions.updateSectionTags(response));\n              }\n            }\n            if (onComplete) {\n              onComplete(response);\n            }\n          });\n      };\n    },\n\n\n    updateSectionEntry: function(resp) {\n      return {\n        type: ActionTypes.UPDATE_SECTION_ENTRY,\n        resp: resp\n      };\n    },\n\n\n    renameSectionEntriesSitename: function (data) {\n      return {\n        type: ActionTypes.RENAME_SECTION_ENTRIES_SITENAME,\n        data: data\n      };\n    },\n\n\n    renameSectionEntries: function (data) {\n      return {\n        type: ActionTypes.RENAME_SECTION_ENTRIES,\n        data: data\n      };\n    },\n\n\n    initDeleteSectionEntry: function(site, section, entryId, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_DELETE_SECTION_ENTRY });\n        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SECTION });\n\n        sync(window.Berta.urls.sectionEntries, {site: site, section: section, entryId: entryId}, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteSectionEntry(response));\n\n              dispatch(Actions.updateSiteSection({\n                'path': response.site_name + '/section/' + response.section_order + '/@attributes/entry_count',\n                'section': response.section,\n                'value': response.entry_count\n              }));\n\n              dispatch(Actions.updateSiteSection({\n                'path': response.site_name + '/section/' + response.section_order + '/@attributes/has_direct_content',\n                'section': response.section,\n                'value': response.has_direct_content\n              }));\n\n              dispatch(Actions.updateSectionTags(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    deleteSectionEntry: function(resp) {\n      return {\n        type: ActionTypes.DELETE_SECTION_ENTRY,\n        resp: resp\n      };\n    },\n\n\n    deleteSiteSectionsEntries: function (data) {\n      return {\n        type: ActionTypes.DELETE_SITE_SECTIONS_ENTRIES,\n        data: data\n      };\n    },\n\n\n    deleteSectionEntries: function (data) {\n      return {\n        type: ActionTypes.DELETE_SECTION_ENTRIES,\n        data: data\n      };\n    },\n\n\n    initOrderSectionEntryGallery: function(site, section, entryId, files, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_ORDER_SECTION_ENTRY_GALLERY });\n\n        sync(window.Berta.urls.entryGallery, {site: site, section: section, entryId: entryId, files: files}, 'PUT')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.orderSectionEntryGallery(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    orderSectionEntryGallery: function(resp) {\n      return {\n        type: ActionTypes.ORDER_SECTION_ENTRY_GALLERY,\n        resp: resp\n      };\n    },\n\n\n    initDeleteEntryGalleryImage: function(site, section, entryId, file, onComplete) {\n      return function (dispatch) {\n        dispatch({ type: ActionTypes.INIT_DELETE_ENTRY_GALLERY_IMAGE });\n\n        sync(window.Berta.urls.entryGallery, {site: site, section: section, entryId: entryId, file: file}, 'DELETE')\n          .then(function (response) {\n            if (response.error_message) {\n              // @TODO dispatch error message\n            } else {\n              dispatch(Actions.deleteEntryGalleryImage(response));\n            }\n            onComplete(response);\n          });\n      };\n    },\n\n\n    // There is no reducer for this action at the moment\n    // `orderSectionEntryGallery` is called after delete which updates state\n    deleteEntryGalleryImage: function(resp) {\n      return {\n        type: ActionTypes.DELETE_ENTRY_GALLERY_IMAGE,\n        resp: resp\n      };\n    }\n  });\n\n})(window, window.sync, window.Actions, window.ActionTypes);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    sectionEntries: function(state, action) {\n      var site_name;\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.sectionEntries);\n\n\n        case ActionTypes.ADD_SITE_SECTIONS_ENTRIES:\n          return state.set(action.data.site_name, action.data.entries);\n\n\n        case ActionTypes.ADD_SECTION_ENTRIES:\n          return state.map(function (site, site_name) {\n            if (site_name === action.data.site_name) {\n              return site.concat(Immutable.fromJS(action.data.entries));\n            }\n            return site;\n          });\n\n\n        case ActionTypes.UPDATE_SECTION_ENTRY:\n          var path = action.resp.path.split('/');\n          var siteName = path[0] === '0' ? '' : path[0];\n          var sectionName = path[2];\n          var entryId = path[3];\n\n          var index = state.get(siteName).findIndex(function (entry) {\n            return entry.get('id') === entryId && entry.get('sectionName') === sectionName;\n          });\n\n          if (index < 0) {\n            return state;\n          }\n\n          return state.setIn(\n            [siteName, index],\n            state.getIn([siteName, index]).merge(action.resp.entry)\n          );\n\n\n        case ActionTypes.RENAME_SECTION_ENTRIES_SITENAME:\n          var site_old_name = action.data.site.get('name');\n\n          return state.mapKeys(function (site_name) {\n            if (site_name === site_old_name) {\n              return action.data.site_name;\n            }\n            return site_name;\n          });\n\n\n        case ActionTypes.RENAME_SECTION_ENTRIES:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.map(function (entry) {\n                if (entry.get('sectionName') === action.data.section_old_name) {\n                  return entry.set('sectionName', action.data.section_name);\n                }\n                return entry;\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.DELETE_SECTION_ENTRY:\n          site_name = action.resp.site_name === '0' ? '' : action.resp.site_name;\n\n          return state.map(function (site, k) {\n            if (site_name === k) {\n              return site.filter(function (entry) {\n                return !(entry.get('sectionName') === action.resp.section_name && entry.get('id') === action.resp.entry_id);\n              }).map(function (entry) {\n                if (entry.get('sectionName') === action.resp.section_name && entry.get('order') > action.resp.entry_order ) {\n                  return entry.set('order', entry.get('order') - 1);\n                }\n                return entry;\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.DELETE_SITE_SECTIONS_ENTRIES:\n          return state.filter(function (entries, site_name) {\n            return site_name !== action.data.site_name;\n          });\n\n\n        case ActionTypes.DELETE_SECTION_ENTRIES:\n          site_name = action.data.site_name === '0' ? '' : action.data.site_name;\n\n          return state.map(function (site, s) {\n            if (site_name === s) {\n              return site.filter(function (entry) {\n                return entry.get('sectionName') !== action.data.section_name;\n              });\n            }\n            return site;\n          });\n\n\n        case ActionTypes.ORDER_SECTION_ENTRY_GALLERY:\n          return state.map(function (site, site_name) {\n            if (site_name === action.resp.site) {\n              return site.map(function (entry) {\n                if (entry.get('sectionName') === action.resp.section && entry.get('id') === action.resp.entry_id) {\n                  return entry\n                    .set('mediafolder', action.resp.mediafolder)\n                    .setIn(['mediaCacheData', 'file'], action.resp.files);\n                }\n                return entry;\n              });\n            }\n            return site;\n          });\n\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function(window, Immutable, ActionTypes) {\n  'use strict';\n\n  window.reducers = window.reducers || {};\n\n  Object.assign(window.reducers, {\n    siteTemplates: function(state, action) {\n\n      if (state === undefined) {\n        state = Immutable.Map();\n      }\n\n      switch (action.type) {\n        case ActionTypes.SET_STATE:\n          return Immutable.fromJS(action.state.siteTemplates);\n\n        default:\n          return state;\n      }\n    }\n  });\n})(window, window.Immutable, window.ActionTypes);\n","(function(window, Redux, reducers) {\n  'use strict';\n\n  window.root_reducer = Redux.combineReducers(reducers);\n})(window, window.Redux, window.reducers);\n","(function (window, Redux, ReduxThunk, Actions, Templates, domReady, getCurrentSite) {\n  'use strict';\n\n  domReady(Templates.load);\n\n  var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;\n  window.redux_store = Redux.createStore(\n    window.root_reducer,\n    {},\n    composeEnhancers(\n      Redux.applyMiddleware(ReduxThunk.default)\n    )\n  );\n\n  var site = getCurrentSite();\n  window.redux_store.dispatch(Actions.getState(site));\n\n})(window, window.Redux, window.ReduxThunk, window.Actions, window.Templates, window.domReady, window.getCurrentSite);\n"]}