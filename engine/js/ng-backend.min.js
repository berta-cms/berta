window.Berta = {};

(function(window, document, redux_store) {
  'use strict';
  /** @todo: move helpers to Berta namespace */

  window.sync = function (url, data, method) {
    var token = window.getCookie('token');
    method = method || 'PATCH';

    return new Promise(function(resolve) {
      var maxChecks = 5;

      if (typeof window.syncState === 'function') {
        resolve(window.syncState(url, data, method).then(function(reponse) {
          return JSON.parse(JSON.stringify(reponse));
        }));
        return;
      }

      var interval = setInterval(function() {
        if (typeof window.syncState === 'function') {
          clearInterval(interval);
          resolve(window.syncState(url, data, method).then(function(reponse) {
              return JSON.parse(JSON.stringify(reponse));
          }));
        }

        if (maxChecks === 0) {
          clearInterval(interval);
          resolve(fetch(
            url,
            {
              method: method,
              credentials: 'include',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'X-Authorization': 'Bearer ' + token
              },
              body: method === 'GET' ? undefined : JSON.stringify(data)
            }
          ).then(function (response) {
            if (response.status === 401) {
              window.BertaHelpers.logoutUser();
              throw new Error('Unauthorized');
            }
            return response.json();
          }));
        }
        maxChecks =- 1;
      }, 200);
    });
  };

  window.getCookie = function (cname) {
    var name = cname + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) === ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) === 0) {
        return c.substring(name.length, c.length);
      }
    }
    return '';
  };

  window.getQueryParams = function getQueryParams() {
    var pairs = location.search.slice(1).split('&');
    var result = {};

    pairs.forEach(function(pair) {
      if (pair[0]) {
        pair = pair.split('=');
        result[pair[0]] = decodeURIComponent(pair[1] || '');
      }
    });

    return result;
  };

  window.getCurrentSite = function getCurrentSite() {
    var q = window.getQueryParams();
    return q.site === undefined ? '' : q.site;
  };

  window.escapeHTML = function escapeHTML(str) {
    var div = document.createElement('div');
    var text = document.createTextNode(str);
    div.appendChild(text);
    return div.innerHTML;
  };

  window.getAllTemplates = function getAllTemplates() {
    var templates = redux_store.getState().siteTemplates.toJSON();

    return Object.getOwnPropertyNames(templates);
  };

  var Templates = {
    templates: {}
  };

  Templates.load = function load() {
    var templateList = document.getElementById('templateList');

    if (templateList) {
      var templates = Array.prototype.slice.call(
        templateList.querySelectorAll('script'),
        0
      );

      templates.forEach(function(template){
        if(template.getAttribute('type') === 'text/template'){
          this.templates[template.getAttribute('id')] = template.innerHTML;
        }
      }.bind(this));
    }
  }.bind(Templates);

  Templates.get = function get(name, ctx) {
    var tpl = this.templates[name];

    return tpl.replace(/<%=([^%>]+)%>/g, function(str, match) {
      return ctx[match];
    });
  }.bind(Templates);

  window.Templates = Templates;

  window.domReady = function(callback) {
    var ready = false,
        detach = function() {
          if(document.addEventListener) {
            document.removeEventListener('DOMContentLoaded', completed);
            window.removeEventListener('load', completed);
          } else {
            document.detachEvent('onreadystatechange', completed);
            window.detachEvent('onload', completed);
          }
        },
        completed = function() {
          if(!ready && (document.addEventListener || event.type === 'load' || document.readyState === 'complete')) {
            ready = true;
            detach();
            callback();
          }
        };

    if(document.readyState === 'complete') {
      callback();
    } else if(document.addEventListener) {
      document.addEventListener('DOMContentLoaded', completed);
      window.addEventListener('load', completed);
    } else {
      document.attachEvent('onreadystatechange', completed);
      window.attachEvent('onload', completed);

      var top = false;

      try {
        top = window.frameElement === null && document.documentElement;
      } catch(e) { /* skip */}

      if(top && top.doScroll) {
        (function scrollCheck() {
          if(ready) return;

          try {
            top.doScroll('left');
          } catch(e) {
            return setTimeout(scrollCheck, 50);
          }

          ready = true;
          detach();
          callback();
        })();
      }
    }
  };
})(window, document, window.redux_store);

(function(window) {
  'use strict';

  window.editables = {
    xEditable: 'xEditable',                     // simple input
    xEditableSelect: 'xEditableSelect',         // select
    xEditableSelectRC: 'xEditableSelectRC',     // select
    xEditableFontSelect: 'xEditableFontSelect', // select
    xEditableImage: 'xEditableImage',           // image upload
    xEditableICO: 'xEditableICO',               // ico upload
    xEditableTA: 'xEditableTA',                 // textarea
    xEditableMCE: 'xEditableMCE',               // textarea
    xEditableMCESimple: 'xEditableMCESimple',   // textarea
    xEditableRC: 'xEditableRC',                 // with "real" content
    xEditableYesNo: 'xEditableYesNo',           // the "yes/no" switch
    xEmpty: 'xEmpty'
  };

  window.formats = {
    text: window.editables.xEditable,
    longtext: window.editables.xEditableTA,
    richtext: window.editables.xEditableMCESimple,
    image: window.editables.xEditableImage,
    icon: window.editables.xEditableICO,
    select: window.editables.xEditableSelectRC,
    fontselect: window.editables.xEditableFontSelect
  };

})(window);

(function (window) {
  'use strict';

  window.ActionTypes = {
    GET_STATE: 'GET_STATE',
    SET_STATE: 'SET_STATE',

    INIT_CREATE_SITE: 'INIT_CREATE_SITE',
    CREATE_SITE: 'CREATE_SITE',
    INIT_UPDATE_SITE: 'INIT_UPDATE_SITE',
    UPDATE_SITE: 'UPDATE_SITE',
    INIT_ORDER_SITES: 'INIT_ORDER_SITES',
    ORDER_SITES: 'ORDER_SITES',
    INIT_DELETE_SITE: 'INIT_DELETE_SITE',
    DELETE_SITE: 'DELETE_SITE',

    CREATE_SITE_SETTINGS: 'CREATE_SITE_SETTINGS',
    INIT_UPDATE_SITE_SETTINGS: 'INIT_UPDATE_SITE_SETTINGS',
    UPDATE_SITE_SETTINGS: 'UPDATE_SITE_SETTINGS',
    RENAME_SITE_SETTINGS_SITENAME: 'RENAME_SITE_SETTINGS_SITENAME',
    INIT_DELETE_SITE_SETTINGS: 'INIT_DELETE_SITE_SETTINGS',
    DELETE_SITE_SETTINGS: 'DELETE_SITE_SETTINGS',

    CREATE_SITE_TEMPLATE_SETTINGS: 'CREATE_SITE_TEMPLATE_SETTINGS',
    INIT_UPDATE_SITE_TEMPLATE_SETTINGS: 'INIT_UPDATE_SITE_TEMPLATE_SETTINGS',
    UPDATE_SITE_TEMPLATE_SETTINGS: 'UPDATE_SITE_TEMPLATE_SETTINGS',
    RENAME_SITE_TEMPLATE_SETTINGS_SITENAME: 'RENAME_SITE_TEMPLATE_SETTINGS_SITENAME',
    INIT_DELETE_SITE_TEMPLATE_SETTINGS: 'INIT_DELETE_SITE_TEMPLATE_SETTINGS',
    DELETE_SITE_TEMPLATE_SETTINGS: 'DELETE_SITE_TEMPLATE_SETTINGS',

    INIT_CREATE_SITE_SECTION: 'INIT_CREATE_SITE_SECTION',
    CREATE_SITE_SECTION: 'CREATE_SITE_SECTION',
    INIT_UPDATE_SITE_SECTION: 'INIT_UPDATE_SITE_SECTION',
    UPDATE_SITE_SECTION: 'UPDATE_SITE_SECTION',
    RENAME_SITE_SECTIONS_SITENAME: 'RENAME_SITE_SECTIONS_SITENAME',
    RESET_SITE_SECTION: 'RESET_SITE_SECTION',
    INIT_ORDER_SITE_SECTIONS: 'INIT_ORDER_SITE_SECTIONS',
    ORDER_SITE_SECTIONS: 'ORDER_SITE_SECTIONS',
    INIT_DELETE_SITE_SECTION: 'INIT_DELETE_SITE_SECTION',
    DELETE_SITE_SECTION: 'DELETE_SITE_SECTION',
    INIT_DELETE_SITE_SECTIONS: 'INIT_DELETE_SITE_SECTIONS',
    DELETE_SITE_SECTIONS: 'DELETE_SITE_SECTIONS',

    INIT_ORDER_SITE_SECTION_BACKGROUNDS: 'INIT_ORDER_SITE_SECTION_BACKGROUNDS',
    ORDER_SITE_SECTION_BACKGROUNDS: 'ORDER_SITE_SECTION_BACKGROUNDS',
    INIT_DELETE_SITE_SECTION_BACKGROUND: 'INIT_DELETE_SITE_SECTION_BACKGROUND',
    DELETE_SITE_SECTION_BACKGROUND: 'DELETE_SITE_SECTION_BACKGROUND',

    ADD_SECTION_TAGS: 'ADD_SECTION_TAGS',
    ADD_SITE_SECTIONS_TAGS: 'ADD_SITE_SECTIONS_TAGS',
    INIT_ORDER_SECTION_TAGS: 'INIT_ORDER_SECTION_TAGS',
    ORDER_SECTION_TAGS: 'ORDER_SECTION_TAGS',
    INIT_UPDATE_SECTION_TAGS: 'INIT_UPDATE_SECTION_TAGS',
    UPDATE_SECTION_TAGS: 'UPDATE_SECTION_TAGS',
    RENAME_SECTION_TAGS: 'RENAME_SECTION_TAGS',
    RENAME_SECTION_TAGS_SITENAME: 'RENAME_SECTION_TAGS_SITENAME',
    DELETE_SECTION_TAGS: 'DELETE_SECTION_TAGS',
    INIT_DELETE_SITE_SECTIONS_TAGS: 'INIT_DELETE_SITE_SECTIONS_TAGS',
    DELETE_SITE_SECTIONS_TAGS: 'DELETE_SITE_SECTIONS_TAGS',

    ADD_SITE_SECTIONS_ENTRIES: 'ADD_SITE_SECTIONS_ENTRIES',
    ADD_SECTION_ENTRIES: 'ADD_SECTION_ENTRIES',
    INIT_CREATE_SECTION_ENTRY: 'INIT_CREATE_SECTION_ENTRY',
    INIT_UPDATE_SECTION_ENTRY: 'INIT_UPDATE_SECTION_ENTRY',
    UPDATE_SECTION_ENTRY: 'UPDATE_SECTION_ENTRY',
    INIT_UPDATE_SECTION_ENTRIES: 'INIT_UPDATE_SECTION_ENTRIES',
    INIT_MOVE_ENTRY_TO_SECTION: 'INIT_MOVE_ENTRY_TO_SECTION',
    RENAME_SECTION_ENTRIES_SITENAME: 'RENAME_SECTION_ENTRIES_SITENAME',
    RENAME_SECTION_ENTRIES: 'RENAME_SECTION_ENTRIES',
    INIT_ORDER_SECTION_ENTRIES: 'INIT_ORDER_SECTION_ENTRIES',
    ORDER_SECTION_ENTRIES: 'ORDER_SECTION_ENTRIES',
    INIT_ORDER_SECTION_ENTRY_GALLERY: 'INIT_ORDER_SECTION_ENTRY_GALLERY',
    ORDER_SECTION_ENTRY_GALLERY: 'ORDER_SECTION_ENTRY_GALLERY',
    INIT_DELETE_ENTRY_GALLERY_IMAGE: 'INIT_DELETE_ENTRY_GALLERY_IMAGE',
    DELETE_ENTRY_GALLERY_IMAGE: 'DELETE_ENTRY_GALLERY_IMAGE',
    INIT_DELETE_SECTION_ENTRY: 'INIT_DELETE_SECTION_ENTRY',
    DELETE_SECTION_ENTRY: 'DELETE_SECTION_ENTRY',
    INIT_DELETE_SITE_SECTIONS_ENTRIES: 'INIT_DELETE_SITE_SECTIONS_ENTRIES',
    DELETE_SITE_SECTIONS_ENTRIES: 'DELETE_SITE_SECTIONS_ENTRIES',
    INIT_DELETE_SECTION_ENTRIES: 'INIT_DELETE_SECTION_ENTRIES',
    DELETE_SECTION_ENTRIES: 'DELETE_SECTION_ENTRIES'
  };
})(window);

(function(window, Berta, ActionTypes, sync) {
  'use strict';

  window.Actions = window.Actions || {};

  Object.assign(window.Actions, {

    getState: function(site) {
      site = site ? site : '0';
      var url = '/_api/v1/state/' + site;

      return function (dispatch) {
        dispatch({ type: ActionTypes.GET_STATE });

        sync(url, {}, 'GET')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(window.Actions.setState(response));
            }
          });
      };
    },


    setState: function(state) {
      Berta.urls = state.urls;

      return {
        type: ActionTypes.SET_STATE,
        state: state
      };
    }
  });
})(window, window.Berta, window.ActionTypes, window.sync);

(function (window, ActionTypes, sync) {
  'use strict';

  var Actions = window.Actions = window.Actions || {};

  Object.assign(window.Actions, {

    initCreateSite: function (site, onComplete) {
      return function (dispatch) {

        dispatch({
          type: ActionTypes.INIT_CREATE_SITE
        });

        sync(window.Berta.urls.sites, {
          site: site
        }, 'POST')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.createSite(response.site));

              if (response.settings) {
                dispatch(Actions.createSiteSettings(response.site.name, response.settings));
              }

              if (response.sections && response.sections.length) {
                for (var i = 0; i < response.sections.length; i++) {
                  dispatch(Actions.createSiteSection(response.sections[i]));
                }
              }

              if (response.entries && response.entries.length) {
                dispatch(Actions.addSiteSectionsEntries({
                  site_name: response.site.name,
                  entries: response.entries
                }));
              }

              if (response.tags && response.tags.section) {
                dispatch(Actions.addSiteSectionsTags({
                  site_name: response.site.name,
                  tags: response.tags
                }));
              }

              if (response.siteTemplateSettings) {
                dispatch(Actions.createSiteTemplateSettings(response.site.name, response.siteTemplateSettings));
              }
            }
            onComplete(response.site);
          });
      };
    },

    createSite: function (data) {
      return {
        type: ActionTypes.CREATE_SITE,
        data: data
      };
    },

    initUpdateSite: function (path, value, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_UPDATE_SITE
        });

        sync(window.Berta.urls.sites, {
          path: path,
          value: value
        })
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.updateSite(response));
            }
            onComplete(response);
          });
      };
    },

    updateSite: function (resp) {
      return {
        type: ActionTypes.UPDATE_SITE,
        resp: resp
      };
    },

    renameSite: function (path, value, onComplete) {
      return function (dispatch, getStore) {
        dispatch({
          type: ActionTypes.INIT_UPDATE_SITE
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SITE_SECTION
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SITE_SETTINGS
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SITE_TEMPLATE_SETTINGS
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SECTION_TAGS
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SECTION_ENTRIES
        });

        sync(window.Berta.urls.sites, {
          path: path,
          value: value
        })
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              path = path.split('/');
              var order = parseInt(path[1], 10);
              var site = getStore().sites.find(function (site) {
                return site.get('order') === order;
              });

              dispatch(Actions.updateSite(response));
              dispatch(Actions.renameSiteSectionsSitename({
                site: site,
                site_name: response.value
              }));
              dispatch(Actions.renameSiteSettingsSitename({
                site: site,
                site_name: response.value
              }));
              dispatch(Actions.renameSiteTemplateSettingsSitename({
                site: site,
                site_name: response.value
              }));
              dispatch(Actions.renameSectionTagsSitename({
                site: site,
                site_name: response.value
              }));
              dispatch(Actions.renameSectionEntriesSitename({
                site: site,
                site_name: response.value
              }));
            }
            onComplete(response);
          });
      };
    },

    initOrderSites: function (sites, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_ORDER_SITES
        });

        sync(window.Berta.urls.sites, sites, 'PUT')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.orderSites(sites));
            }
            onComplete(response);
          });
      };
    },

    orderSites: function (resp) {
      return {
        type: ActionTypes.ORDER_SITES,
        resp: resp
      };
    },

    initdeleteSite: function (site, onComplete) {
      return function (dispatch) {

        // @TODO also delete related: entries

        dispatch({
          type: ActionTypes.INIT_DELETE_SITE
        });
        dispatch({
          type: ActionTypes.INIT_DELETE_SITE_SECTIONS
        });
        dispatch({
          type: ActionTypes.INIT_DELETE_SITE_SETTINGS
        });
        dispatch({
          type: ActionTypes.INIT_DELETE_SITE_TEMPLATE_SETTINGS
        });
        dispatch({
          type: ActionTypes.INIT_DELETE_SITE_SECTIONS_TAGS
        });
        dispatch({
          type: ActionTypes.INIT_DELETE_SITE_SECTIONS_ENTRIES
        });

        sync(window.Berta.urls.sites, {
          site: site
        }, 'DELETE')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.deleteSite(response));
              dispatch(Actions.deleteSiteSections({
                site_name: response.name
              }));
              dispatch(Actions.deleteSiteSettings({
                site_name: response.name
              }));
              dispatch(Actions.deleteSiteTemplateSettings({
                site_name: response.name
              }));
              dispatch(Actions.deleteSiteSectionsTags({
                site_name: response.name
              }));
              dispatch(Actions.deleteSiteSectionsEntries({
                site_name: response.name
              }));
            }
            onComplete(response);
          });
      };
    },

    deleteSite: function (resp) {
      return {
        type: ActionTypes.DELETE_SITE,
        resp: resp
      };
    }
  });
})(window, window.ActionTypes, window.sync);

(function(window, Immutable, ActionTypes) {
  'use strict';

  window.reducers = window.reducers || {};

  Object.assign(window.reducers, {
    sites: function(state, action) {
      var path, value, order;

      if (state === undefined) {
        state = Immutable.Map();
      }

      switch (action.type) {

        case ActionTypes.SET_STATE:
          return Immutable.fromJS(action.state.sites);


        case ActionTypes.CREATE_SITE:
          return state.set(state.size, Immutable.fromJS(action.data));


        case ActionTypes.UPDATE_SITE:
          path = action.resp.path.split('/');
          order = parseInt(path[1], 10);
          value = action.resp.value;
          var prop = path.slice(2);  // example "title" or "@attributes/published"

          return state.map(function (site) {
            if (site.get('order') === order && site.getIn(prop) !== value) {
              return site.setIn(prop, value);
            }
            return site;
          });


        case ActionTypes.ORDER_SITES:
          return state.map(function (site) {
            var name = site.get('name');
            if (name === '') {
              name = '0';
            }
            var new_order = action.resp.indexOf(name);

            if (site.get('order') !== new_order) {
              return site.set('order', new_order);
            }
            return site;
          });


        case ActionTypes.DELETE_SITE:
          // Filter out deleted site
          return state.filter(function (site) {
            return site.get('name') !== action.resp.name;

          // Update order
          }).map(function (site, order) {
            if (site.get('order') !== order) {
              return site.set('order', order);
            }
            return site;
          });


        default:
          return state;
      }
    }
  });
})(window, window.Immutable, window.ActionTypes);

(function (window, ActionTypes, sync) {
  'use strict';

  var Actions = window.Actions = window.Actions || {};

  Object.assign(window.Actions, {

    createSiteSettings: function (site_name, data) {
      return {
        type: ActionTypes.CREATE_SITE_SETTINGS,
        site_name: site_name,
        data: data
      };
    },

    initUpdateSiteSettings: function(path, value, onComplete) {
      return function (dispatch) {
        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_SETTINGS });

        sync(window.Berta.urls.siteSettings, { path: path, value: value })
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.updateSiteSettings(response));
            }
            onComplete(response);
          });
      };
    },

    updateSiteSettings: function (resp) {
      return {
        type: ActionTypes.UPDATE_SITE_SETTINGS,
        resp: resp
      };
    },

    renameSiteSettingsSitename: function (data) {
      return {
        type: ActionTypes.RENAME_SITE_SETTINGS_SITENAME,
        data: data
      };
    },

    deleteSiteSettings: function (data) {
      return {
        type: ActionTypes.DELETE_SITE_SETTINGS,
        data: data
      };
    },
  });

})(window, window.ActionTypes, window.sync);

(function(window, Immutable, ActionTypes) {
  'use strict';

  window.reducers = window.reducers || {};

  Object.assign(window.reducers, {
    siteSettings: function(state, action) {

      if (state === undefined) {
        state = Immutable.Map();
      }

      switch (action.type) {
        case ActionTypes.SET_STATE:
          return Immutable.fromJS(action.state.site_settings);


        case ActionTypes.CREATE_SITE_SETTINGS:
          return state.setIn([action.site_name], Immutable.fromJS(action.data));


        case ActionTypes.UPDATE_SITE_SETTINGS:
          var path = action.resp.path.split('/').slice(2);
          var value = action.resp.value;

          return state.setIn(
            [action.resp.site, path[0], path[1]],
            value
          );


        case ActionTypes.RENAME_SITE_SETTINGS_SITENAME:
          var section_old_name = action.data.site.get('name');

          return state.mapKeys(function (k) {
            if (k === section_old_name) {
              return action.data.site_name;
            }
            return k;
          });


        case ActionTypes.DELETE_SITE_SETTINGS:
          return state.filter(function (settings, site_name) {
            return site_name !== action.data.site_name;
          });


        default:
          return state;
      }
    }
  });
})(window, window.Immutable, window.ActionTypes);

(function (window, ActionTypes, sync) {
  'use strict';

  var Actions = window.Actions = window.Actions || {};

  Object.assign(window.Actions, {

    createSiteTemplateSettings: function(site_name, data) {
      return {
        type: ActionTypes.CREATE_SITE_TEMPLATE_SETTINGS,
        site_name: site_name,
        data: data
      };
    },

    initUpdateSiteTemplateSettings: function(path, value, onComplete) {
      return function (dispatch) {
        dispatch({ type: ActionTypes.INIT_UPDATE_SITE_TEMPLATE_SETTINGS });

        sync(window.Berta.urls.siteTemplateSettings, { path: path, value: value })
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.updateSiteTemplateSettings(response));
            }
            onComplete(response);
          });
      };
    },

    updateSiteTemplateSettings: function (resp) {
      return {
        type: ActionTypes.UPDATE_SITE_TEMPLATE_SETTINGS,
        resp: resp
      };
    },

    renameSiteTemplateSettingsSitename: function (data) {
      return {
        type: ActionTypes.RENAME_SITE_TEMPLATE_SETTINGS_SITENAME,
        data: data
      };
    },

    deleteSiteTemplateSettings: function (data) {
      return {
        type: ActionTypes.DELETE_SITE_TEMPLATE_SETTINGS,
        data: data
      };
    }
  });

})(window, window.ActionTypes, window.sync);

(function (window, Immutable, ActionTypes) {
  'use strict';

  window.reducers = window.reducers || {};

  Object.assign(window.reducers, {
    siteTemplateSettings: function (state, action) {

      if (state === undefined) {
        state = Immutable.Map();
      }

      switch (action.type) {
        case ActionTypes.SET_STATE:
          return Immutable.fromJS(action.state.site_template_settings);


        case ActionTypes.CREATE_SITE_TEMPLATE_SETTINGS:
          return state.setIn([action.site_name], Immutable.fromJS(action.data));


        case ActionTypes.UPDATE_SITE_TEMPLATE_SETTINGS:
          var path = action.resp.path.split('/').slice(2);
          var value = action.resp.value;

          return state.setIn(
            [action.resp.site, path[0], path[1], path[2]],
            value
          );


        case ActionTypes.RENAME_SITE_TEMPLATE_SETTINGS_SITENAME:
          var section_old_name = action.data.site.get('name');

          return state.mapKeys(function (k) {
            if (k === section_old_name) {
              return action.data.site_name;
            }
            return k;
          });


        case ActionTypes.DELETE_SITE_TEMPLATE_SETTINGS:
          return state.filter(function (site_template_settings, site_name) {
            return site_name !== action.data.site_name;
          });


        default:
          return state;
      }
    }
  });
})(window, window.Immutable, window.ActionTypes);

(function (window, ActionTypes, sync) {
  'use strict';

  var Actions = window.Actions = window.Actions || {};

  Object.assign(window.Actions, {

    initCreateSiteSection: function (site, name, title, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_CREATE_SITE_SECTION
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SECTION_TAGS
        });

        sync(window.Berta.urls.siteSections, {
          site: site,
          name: name,
          title: title
        }, 'POST')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.createSiteSection(response.section));

              if (response.tags) {
                dispatch(Actions.addSectionTags({
                  site_name: site,
                  tags: response.tags
                }));
              }

              if (response.entries) {
                dispatch(Actions.addSectionEntries({
                  site_name: site,
                  entries: response.entries
                }));
              }
            }
            onComplete(response.section);
          });
      };
    },


    createSiteSection: function (resp) {
      return {
        type: ActionTypes.CREATE_SITE_SECTION,
        resp: resp
      };
    },


    initUpdateSiteSection: function (path, value, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_UPDATE_SITE_SECTION
        });

        sync(window.Berta.urls.siteSections, {
          path: path,
          value: value
        })
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.updateSiteSection(response));
            }
            onComplete(response);
          });
      };
    },


    updateSiteSection: function (resp) {
      return {
        type: ActionTypes.UPDATE_SITE_SECTION,
        resp: resp
      };
    },


    initRenameSiteSection: function (path, value, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_UPDATE_SITE_SECTION
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SECTION_TAGS
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SECTION_ENTRIES
        });

        sync(window.Berta.urls.siteSections, {
          path: path,
          value: value
        })
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.updateSiteSection(response));
              dispatch(Actions.renameSectionTags({
                site_name: response.site,
                section_name: response.section.name,
                section_old_name: response.old_name
              }));
              dispatch(Actions.renameSectionEntries({
                site_name: response.site,
                section_name: response.section.name,
                section_old_name: response.old_name
              }));
            }
            onComplete(response);
          });
      };
    },


    renameSiteSectionsSitename: function (data) {
      return {
        type: ActionTypes.RENAME_SITE_SECTIONS_SITENAME,
        data: data
      };
    },


    resetSiteSection: function (path, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.RESET_SITE_SECTION,
          path: path
        });

        sync(window.Berta.urls.siteSectionsReset, {
          path: path
        })
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            }
            onComplete(response);
          });
      };
    },


    initOrderSiteSections: function (site, sections, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_ORDER_SITE_SECTIONS
        });

        sync(window.Berta.urls.siteSections, {
          site: site,
          sections: sections
        }, 'PUT')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.orderSiteSections({
                site: site,
                sections: sections
              }));
            }
            onComplete(response);
          });
      };
    },


    orderSiteSections: function (resp) {
      return {
        type: ActionTypes.ORDER_SITE_SECTIONS,
        resp: resp
      };
    },


    initDeleteSiteSection: function (site, section, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_DELETE_SITE_SECTION
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SECTION_TAGS
        });
        dispatch({
          type: ActionTypes.INIT_DELETE_SECTION_ENTRIES
        });

        sync(window.Berta.urls.siteSections, {
          site: site,
          section: section
        }, 'DELETE')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.deleteSiteSection(response));

              dispatch(Actions.deleteSectionTags({
                site_name: response.site,
                section_name: response.name
              }));

              dispatch(Actions.deleteSectionEntries({
                site_name: response.site,
                section_name: response.name
              }));
            }
            onComplete(response);
          });
      };
    },


    deleteSiteSection: function (resp) {
      return {
        type: ActionTypes.DELETE_SITE_SECTION,
        resp: resp
      };
    },


    deleteSiteSections: function (data) {
      return {
        type: ActionTypes.DELETE_SITE_SECTIONS,
        data: data
      };
    },


    initOrderSiteSectionBackgrounds: function (site, section, files, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_ORDER_SITE_SECTION_BACKGROUNDS
        });

        sync(window.Berta.urls.siteSectionBackgrounds, {
          site: site,
          section: section,
          files: files
        }, 'PUT')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.orderSiteSectionBackgrounds(response));
            }
            onComplete(response);
          });
      };
    },


    orderSiteSectionBackgrounds: function (resp) {
      return {
        type: ActionTypes.ORDER_SITE_SECTION_BACKGROUNDS,
        resp: resp
      };
    },


    initDeleteSiteSectionBackground: function (site, section, file, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_DELETE_SITE_SECTION_BACKGROUND
        });

        sync(window.Berta.urls.siteSectionBackgrounds, {
          site: site,
          section: section,
          file: file
        }, 'DELETE')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.deleteSiteSectionBackground(response));
            }
            onComplete(response);
          });
      };
    },


    // There is no reducer for this action at the moment
    // `orderSiteSectionBackgrounds` is called after delete which updates state
    deleteSiteSectionBackground: function (resp) {
      return {
        type: ActionTypes.DELETE_SITE_SECTION_BACKGROUND,
        resp: resp
      };
    }
  });

})(window, window.ActionTypes, window.sync);

(function (window, Immutable, ActionTypes) {
  'use strict';

  window.reducers = window.reducers || {};

  Object.assign(window.reducers, {
    siteSections: function (state, action) {
      var path,
          site_name,
          order,
          prop,
          value;

      if (state === undefined) {
        state = Immutable.Map();
      }

      switch (action.type) {

        case ActionTypes.SET_STATE:
          return Immutable.fromJS(action.state.site_sections);


        case ActionTypes.CREATE_SITE_SECTION:
          return state.set(state.size, Immutable.fromJS(action.resp));


        case ActionTypes.UPDATE_SITE_SECTION:
          path = action.resp.path.split('/');
          site_name = path[0] === '0' ? '' : path[0];
          order = parseInt(path[2], 10);
          value = action.resp.value;
          prop = path.slice(3); // "title" or "@attributes/published"

          return state.map(function (section) {
            if (section.get('site_name') === site_name && section.get('order') === order && section.getIn(prop) !== value) {
              return section.merge(action.resp.section);
            }
            return section;
          });


        case ActionTypes.RENAME_SITE_SECTIONS_SITENAME:
          var old_name = action.data.site.get('name');
          value = action.data.site_name;

          return state.map(function (section) {
            if (section.get('site_name') === old_name) {
              return section.set('site_name', value);
            }
            return section;
          });


        case ActionTypes.RESET_SITE_SECTION:
          path = action.path.split('/');
          site_name = path[0] === '0' ? '' : path[0];
          order = parseInt(path[2], 10);
          prop = path.slice(3);

          return state.map(function (section) {
            if (section.get('site_name') === site_name && section.get('order') === order) {
              return section.deleteIn(prop);
            }
            return section;
          });


        case ActionTypes.ORDER_SITE_SECTIONS:
          return state.map(function (section) {
            if (section.get('site_name') === action.resp.site) {
              var order = action.resp.sections.indexOf(section.get('name'));

              if (section.get('order') !== order) {
                return section.set('order', order);
              }
            }
            return section;
          });


        case ActionTypes.DELETE_SITE_SECTION:
          site_name = action.resp.site === '0' ? '' : action.resp.site;
          order = -1;

          return state.filter(function (section) {
            return !(section.get('name') === action.resp.name && section.get('site_name') === site_name);

            // Update order
          }).map(function (section) {
            if (section.get('site_name') === site_name) {
              order++;

              if (section.get('order') !== order) {
                return section.set('order', order);
              }
            }
            return section;
          });


        case ActionTypes.DELETE_SITE_SECTIONS:
          return state.filter(function (section) {
            return section.get('site_name') !== action.data.site_name;
          });


        case ActionTypes.ORDER_SITE_SECTION_BACKGROUNDS:
          return state.map(function (section) {
            if (section.get('site_name') === action.resp.site && section.get('name') === action.resp.section) {
              return section
                .set('mediafolder', action.resp.mediafolder)
                .setIn(['mediaCacheData', 'file'], action.resp.files);
            }
            return section;
          });


        default:
          return state;
      }
    }
  });
})(window, window.Immutable, window.ActionTypes);

(function (window, ActionTypes, sync) {
  'use strict';

  var Actions = window.Actions = window.Actions || {};

  Object.assign(window.Actions, {

    addSiteSectionsTags: function (data) {
      return {
        type: ActionTypes.ADD_SITE_SECTIONS_TAGS,
        data: data
      };
    },

    addSectionTags: function (data) {
      return {
        type: ActionTypes.ADD_SECTION_TAGS,
        data: data
      };
    },

    initOrderSectionTags: function (site, section, tag, value, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_ORDER_SECTION_TAGS
        });

        sync(window.Berta.urls.sectionTags, {
          site: site,
          section: section,
          tag: tag,
          value: value
        }, 'PUT')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.orderSectionTags(response));
            }
            onComplete();
          });
      };
    },

    orderSectionTags: function (data) {
      return {
        type: ActionTypes.ORDER_SECTION_TAGS,
        data: data
      };
    },

    renameSectionTags: function (data) {
      return {
        type: ActionTypes.RENAME_SECTION_TAGS,
        data: data
      };
    },

    updateSectionTags: function (data) {
      return {
        type: ActionTypes.UPDATE_SECTION_TAGS,
        data: data
      };
    },

    renameSectionTagsSitename: function (data) {
      return {
        type: ActionTypes.RENAME_SECTION_TAGS_SITENAME,
        data: data
      };
    },

    deleteSectionTags: function (data) {
      return {
        type: ActionTypes.DELETE_SECTION_TAGS,
        data: data
      };
    },

    deleteSiteSectionsTags: function (data) {
      return {
        type: ActionTypes.DELETE_SITE_SECTIONS_TAGS,
        data: data
      };
    }

  });

})(window, window.ActionTypes, window.sync);

(function (window, Immutable, ActionTypes) {
  'use strict';

  window.reducers = window.reducers || {};

  Object.assign(window.reducers, {
    sectionTags: function (state, action) {
      var site_name = [];

      if (state === undefined) {
        state = Immutable.Map();
      }

      switch (action.type) {
        case ActionTypes.SET_STATE:
          return Immutable.fromJS(action.state.section_tags);


        case ActionTypes.ADD_SITE_SECTIONS_TAGS:
          return state.set(action.data.site_name, action.data.tags);


        case ActionTypes.ADD_SECTION_TAGS:
          return state.map(function (site, site_name) {
            if (action.data.site_name === site_name) {
              return site.map(function (sections) {
                return sections.set(sections.size, Immutable.fromJS(action.data.tags));
              });
            }
            return site;
          });


        case ActionTypes.ORDER_SECTION_TAGS:
          site_name = action.data.site_name === '0' ? '' : action.data.site_name;

          return state.map(function (site, k) {
            if (site_name === k) {
              return site.map(function (sections) {
                return sections.map(function (section) {
                  if (section.getIn(['@attributes', 'name']) === action.data.section_name) {
                    var tags = section.get('tag').map(function (tag) {
                      return tag.set('order', action.data.order.indexOf(tag.getIn(['@attributes', 'name'])));
                    });

                    return section.set('tag', tags);
                  }
                  return section;
                });
              });
            }
            return site;
          });


        case ActionTypes.UPDATE_SECTION_TAGS:
          site_name = action.data.site_name === '0' ? '' : action.data.site_name;

          return state.map(function (site, k) {
            if (site_name === k) {
              return site.map(function (sections) {

                if (sections.some(function (section) { return section && section.getIn(['@attributes', 'name']) === action.data.section_name;})) {
                  return sections.map(function (section) {
                    if (section.getIn(['@attributes', 'name']) === action.data.section_name) {
                      return section.merge(action.data.tags);
                    }
                    return section;
                  });
                }

                if (!action.data.tags) {
                  return sections;
                }

                return sections.set(sections.size, Immutable.fromJS(action.data.tags));
              });
            }
            return site;
          });


        case ActionTypes.RENAME_SECTION_TAGS:
          site_name = action.data.site_name === '0' ? '' : action.data.site_name;

          return state.map(function (site, k) {
            if (site_name === k) {
              return site.map(function (sections) {
                return sections.map(function (section) {

                  if (section.getIn(['@attributes', 'name']) === action.data.section_old_name) {

                    return section.setIn(
                      ['@attributes', 'name'],
                      action.data.section_name
                    );
                  }
                  return section;
                });
              });
            }
            return site;
          });


        case ActionTypes.RENAME_SECTION_TAGS_SITENAME:
          var site_old_name = action.data.site.get('name');

          return state.mapKeys(function (site_name) {
            if (site_name === site_old_name) {
              return action.data.site_name;
            }
            return site_name;
          });


        case ActionTypes.DELETE_SECTION_TAGS:
          site_name = action.data.site_name === '0' ? '' : action.data.site_name;

          return state.map(function (site, k) {
            if (site_name === k) {
              return site.map(function (sections) {
                return sections.filter(function (section) {
                  return section.getIn(['@attributes', 'name']) !== action.data.section_name;
                });
              });
            }
            return site;
          });


        case ActionTypes.DELETE_SITE_SECTIONS_TAGS:
          return state.filter(function (tags, site_name) {
            return site_name !== action.data.site_name;
          });


        default:
          return state;
      }
    }
  });
})(window, window.Immutable, window.ActionTypes);

(function (window, sync, Actions, ActionTypes) {
  'use strict';

  window.Actions = window.Actions || {};

  Object.assign(window.Actions, {


    initCreateSectionEntry: function (site, section, tag, before_entry, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_CREATE_SECTION_ENTRY
        });

        sync(window.Berta.urls.sectionEntries, {
          site: site,
          section: section,
          tag: tag,
          before_entry: before_entry
        }, 'POST')
          .then(function (response) {
            onComplete(response);
          });
      };
    },


    addSiteSectionsEntries: function (data) {
      return {
        type: ActionTypes.ADD_SITE_SECTIONS_ENTRIES,
        data: data
      };
    },


    addSectionEntries: function (data) {
      return {
        type: ActionTypes.ADD_SECTION_ENTRIES,
        data: data
      };
    },


    initUpdateSectionEntry: function (path, value, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_UPDATE_SECTION_ENTRY
        });

        sync(window.Berta.urls.sectionEntries, {
          path: path,
          value: value
        })
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.updateSectionEntry(response));

              if (response.section) {
                dispatch({
                  type: ActionTypes.INIT_UPDATE_SITE_SECTION
                });

                dispatch(Actions.updateSiteSection({
                  'path': response.site_name + '/section/' + response.section_order + '/@attributes/has_direct_content',
                  'section': response.section,
                  'value': response.has_direct_content
                }));
              }

              if (response.tags) {
                dispatch(Actions.updateSectionTags(response));
              }
            }
            if (onComplete) {
              onComplete(response);
            }
          });
      };
    },


    updateSectionEntry: function (resp) {
      return {
        type: ActionTypes.UPDATE_SECTION_ENTRY,
        resp: resp
      };
    },


    renameSectionEntriesSitename: function (data) {
      return {
        type: ActionTypes.RENAME_SECTION_ENTRIES_SITENAME,
        data: data
      };
    },


    renameSectionEntries: function (data) {
      return {
        type: ActionTypes.RENAME_SECTION_ENTRIES,
        data: data
      };
    },

    initOrderSectionEntries: function (site, section, entryId, value) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_ORDER_SECTION_ENTRIES
        });

        sync(window.Berta.urls.sectionEntries, {
          site: site,
          section: section,
          entryId: entryId,
          value: value
        }, 'PUT')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.orderSectionEntries(response));
            }
          });
      };
    },

    orderSectionEntries: function (data) {
      return {
        type: ActionTypes.ORDER_SECTION_ENTRIES,
        data: data
      };
    },

    initEntryMoveToSection: function (site, currentSection, entryId, toSection, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_MOVE_ENTRY_TO_SECTION
        });

        sync(window.Berta.urls.sectionEntriesMove, {
          site: site,
          currentSection: currentSection,
          entryId: entryId,
          toSection: toSection
        })
          .then(onComplete);
      };
    },

    initDeleteSectionEntry: function (site, section, entryId, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_DELETE_SECTION_ENTRY
        });
        dispatch({
          type: ActionTypes.INIT_UPDATE_SITE_SECTION
        });

        sync(window.Berta.urls.sectionEntries, {
          site: site,
          section: section,
          entryId: entryId
        }, 'DELETE')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.deleteSectionEntry(response));

              dispatch(Actions.updateSiteSection({
                'path': response.site_name + '/section/' + response.section_order + '/@attributes/entry_count',
                'section': response.section,
                'value': response.entry_count
              }));

              dispatch(Actions.updateSiteSection({
                'path': response.site_name + '/section/' + response.section_order + '/@attributes/has_direct_content',
                'section': response.section,
                'value': response.has_direct_content
              }));

              dispatch(Actions.updateSectionTags(response));
            }
            onComplete(response);
          });
      };
    },


    deleteSectionEntry: function (resp) {
      return {
        type: ActionTypes.DELETE_SECTION_ENTRY,
        resp: resp
      };
    },


    deleteSiteSectionsEntries: function (data) {
      return {
        type: ActionTypes.DELETE_SITE_SECTIONS_ENTRIES,
        data: data
      };
    },


    deleteSectionEntries: function (data) {
      return {
        type: ActionTypes.DELETE_SECTION_ENTRIES,
        data: data
      };
    },


    initOrderSectionEntryGallery: function (site, section, entryId, files, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_ORDER_SECTION_ENTRY_GALLERY
        });

        sync(window.Berta.urls.entryGallery, {
          site: site,
          section: section,
          entryId: entryId,
          files: files
        }, 'PUT')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.orderSectionEntryGallery(response));
            }
            onComplete(response);
          });
      };
    },


    orderSectionEntryGallery: function (resp) {
      return {
        type: ActionTypes.ORDER_SECTION_ENTRY_GALLERY,
        resp: resp
      };
    },


    initDeleteEntryGalleryImage: function (site, section, entryId, file, onComplete) {
      return function (dispatch) {
        dispatch({
          type: ActionTypes.INIT_DELETE_ENTRY_GALLERY_IMAGE
        });

        sync(window.Berta.urls.entryGallery, {
          site: site,
          section: section,
          entryId: entryId,
          file: file
        }, 'DELETE')
          .then(function (response) {
            if (response.error_message) {
              // @TODO dispatch error message
            } else {
              dispatch(Actions.deleteEntryGalleryImage(response));
            }
            onComplete(response);
          });
      };
    },


    // There is no reducer for this action at the moment
    // `orderSectionEntryGallery` is called after delete which updates state
    deleteEntryGalleryImage: function (resp) {
      return {
        type: ActionTypes.DELETE_ENTRY_GALLERY_IMAGE,
        resp: resp
      };
    }
  });

})(window, window.sync, window.Actions, window.ActionTypes);

(function (window, Immutable, ActionTypes) {
  'use strict';

  window.reducers = window.reducers || {};

  Object.assign(window.reducers, {
    sectionEntries: function (state, action) {
      var site_name;

      if (state === undefined) {
        state = Immutable.Map();
      }

      switch (action.type) {

        case ActionTypes.SET_STATE:
          return Immutable.fromJS(action.state.sectionEntries);


        case ActionTypes.ADD_SITE_SECTIONS_ENTRIES:
          return state.set(action.data.site_name, action.data.entries);


        case ActionTypes.ADD_SECTION_ENTRIES:
          return state.map(function (site, site_name) {
            if (site_name === action.data.site_name) {
              return site.concat(Immutable.fromJS(action.data.entries));
            }
            return site;
          });


        case ActionTypes.UPDATE_SECTION_ENTRY:
          var path = action.resp.path.split('/');
          var siteName = path[0] === '0' ? '' : path[0];
          var sectionName = path[2];
          var entryId = path[3];

          var index = state.get(siteName).findIndex(function (entry) {
            return entry.get('id') === entryId && entry.get('sectionName') === sectionName;
          });

          if (index < 0) {
            return state;
          }

          return state.setIn(
            [siteName, index],
            state.getIn([siteName, index]).merge(action.resp.entry)
          );


        case ActionTypes.RENAME_SECTION_ENTRIES_SITENAME:
          var site_old_name = action.data.site.get('name');

          return state.mapKeys(function (site_name) {
            if (site_name === site_old_name) {
              return action.data.site_name;
            }
            return site_name;
          });


        case ActionTypes.RENAME_SECTION_ENTRIES:
          site_name = action.data.site_name === '0' ? '' : action.data.site_name;

          return state.map(function (site, k) {
            if (site_name === k) {
              return site.map(function (entry) {
                if (entry.get('sectionName') === action.data.section_old_name) {
                  return entry.set('sectionName', action.data.section_name);
                }
                return entry;
              });
            }
            return site;
          });


        case ActionTypes.ORDER_SECTION_ENTRIES:
          site_name = action.data.site_name === '0' ? '' : action.data.site_name;

          return state.map(function (site, k) {
            if (site_name === k) {
              return site.map(function (entry) {
                if (entry.get('sectionName') === action.data.section_name) {
                  return entry.set('order', action.data.order.indexOf(entry.get('id')));
                }
                return entry;
              });
            }
            return site;
          });


        case ActionTypes.DELETE_SECTION_ENTRY:
          site_name = action.resp.site_name === '0' ? '' : action.resp.site_name;

          return state.map(function (site, k) {
            if (site_name === k) {
              var deletedEntry = site.find(function (entry) {
                return entry.get('sectionName') === action.resp.section_name && entry.get('id') === action.resp.entry_id;
              });

              return site.filter(function (entry) {
                return !(entry.get('sectionName') === action.resp.section_name && entry.get('id') === action.resp.entry_id);
              }).map(function (entry) {
                if (entry.get('sectionName') === action.resp.section_name && entry.get('order') > deletedEntry.get('order')) {
                  return entry.set('order', entry.get('order') - 1);
                }
                return entry;
              });
            }
            return site;
          });


        case ActionTypes.DELETE_SITE_SECTIONS_ENTRIES:
          return state.filter(function (entries, site_name) {
            return site_name !== action.data.site_name;
          });


        case ActionTypes.DELETE_SECTION_ENTRIES:
          site_name = action.data.site_name === '0' ? '' : action.data.site_name;

          return state.map(function (site, s) {
            if (site_name === s) {
              return site.filter(function (entry) {
                return entry.get('sectionName') !== action.data.section_name;
              });
            }
            return site;
          });


        case ActionTypes.ORDER_SECTION_ENTRY_GALLERY:
          return state.map(function (site, site_name) {
            if (site_name === action.resp.site) {
              return site.map(function (entry) {
                if (entry.get('sectionName') === action.resp.section && entry.get('id') === action.resp.entry_id) {
                  return entry
                    .set('mediafolder', action.resp.mediafolder)
                    .setIn(['mediaCacheData', 'file'], action.resp.files);
                }
                return entry;
              });
            }
            return site;
          });


        default:
          return state;
      }
    }
  });
})(window, window.Immutable, window.ActionTypes);

(function(window, Immutable, ActionTypes) {
  'use strict';

  window.reducers = window.reducers || {};

  Object.assign(window.reducers, {
    siteTemplates: function(state, action) {

      if (state === undefined) {
        state = Immutable.Map();
      }

      switch (action.type) {
        case ActionTypes.SET_STATE:
          return Immutable.fromJS(action.state.siteTemplates);

        default:
          return state;
      }
    }
  });
})(window, window.Immutable, window.ActionTypes);

(function(window, Redux, reducers) {
  'use strict';

  window.root_reducer = Redux.combineReducers(reducers);
})(window, window.Redux, window.reducers);

(function (window, Redux, ReduxThunk, Actions, Templates, domReady, getCurrentSite) {
  'use strict';

  domReady(Templates.load);

  var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;
  window.redux_store = Redux.createStore(
    window.root_reducer,
    {},
    composeEnhancers(
      Redux.applyMiddleware(ReduxThunk.default)
    )
  );

  var site = getCurrentSite();
  window.redux_store.dispatch(Actions.getState(site));

})(window, window.Redux, window.ReduxThunk, window.Actions, window.Templates, window.domReady, window.getCurrentSite);
